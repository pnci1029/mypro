/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record2;
import org.jooq.generated.tables.TimeZoneTransitionType;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * Time zone transition types
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeZoneTransitionTypeRecord extends UpdatableRecordImpl<TimeZoneTransitionTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.time_zone_transition_type.Time_zone_id</code>.
     */
    public TimeZoneTransitionTypeRecord setTimeZoneId(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Time_zone_id</code>.
     */
    public UInteger getTimeZoneId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for
     * <code>mysql.time_zone_transition_type.Transition_type_id</code>.
     */
    public TimeZoneTransitionTypeRecord setTransitionTypeId(UInteger value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.time_zone_transition_type.Transition_type_id</code>.
     */
    public UInteger getTransitionTypeId() {
        return (UInteger) get(1);
    }

    /**
     * Setter for <code>mysql.time_zone_transition_type.Offset</code>.
     */
    public TimeZoneTransitionTypeRecord setOffset(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Offset</code>.
     */
    public Integer getOffset() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>mysql.time_zone_transition_type.Is_DST</code>.
     */
    public TimeZoneTransitionTypeRecord setIsDst(UByte value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Is_DST</code>.
     */
    public UByte getIsDst() {
        return (UByte) get(3);
    }

    /**
     * Setter for <code>mysql.time_zone_transition_type.Abbreviation</code>.
     */
    public TimeZoneTransitionTypeRecord setAbbreviation(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.time_zone_transition_type.Abbreviation</code>.
     */
    public String getAbbreviation() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UInteger, UInteger> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TimeZoneTransitionTypeRecord
     */
    public TimeZoneTransitionTypeRecord() {
        super(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE);
    }

    /**
     * Create a detached, initialised TimeZoneTransitionTypeRecord
     */
    public TimeZoneTransitionTypeRecord(UInteger timeZoneId, UInteger transitionTypeId, Integer offset, UByte isDst, String abbreviation) {
        super(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE);

        setTimeZoneId(timeZoneId);
        setTransitionTypeId(transitionTypeId);
        setOffset(offset);
        setIsDst(isDst);
        setAbbreviation(abbreviation);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TimeZoneTransitionTypeRecord
     */
    public TimeZoneTransitionTypeRecord(org.jooq.generated.tables.pojos.TimeZoneTransitionType value) {
        super(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE);

        if (value != null) {
            setTimeZoneId(value.getTimeZoneId());
            setTransitionTypeId(value.getTransitionTypeId());
            setOffset(value.getOffset());
            setIsDst(value.getIsDst());
            setAbbreviation(value.getAbbreviation());
            resetChangedOnNotNull();
        }
    }
}
