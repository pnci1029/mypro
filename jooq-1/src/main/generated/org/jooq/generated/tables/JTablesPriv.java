/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.TablesPrivRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTablesPriv extends TableImpl<TablesPrivRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.tables_priv</code>
     */
    public static final JTablesPriv TABLES_PRIV = new JTablesPriv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TablesPrivRecord> getRecordType() {
        return TablesPrivRecord.class;
    }

    /**
     * The column <code>mysql.tables_priv.Host</code>.
     */
    public final TableField<TablesPrivRecord, String> HOST = createField(DSL.name("Host"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Db</code>.
     */
    public final TableField<TablesPrivRecord, String> DB = createField(DSL.name("Db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.User</code>.
     */
    public final TableField<TablesPrivRecord, String> USER = createField(DSL.name("User"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Table_name</code>.
     */
    public final TableField<TablesPrivRecord, String> TABLE_NAME = createField(DSL.name("Table_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Grantor</code>.
     */
    public final TableField<TablesPrivRecord, String> GRANTOR = createField(DSL.name("Grantor"), SQLDataType.VARCHAR(288).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Timestamp</code>.
     */
    public final TableField<TablesPrivRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("Timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.tables_priv.Table_priv</code>.
     */
    public final TableField<TablesPrivRecord, String> TABLE_PRIV = createField(DSL.name("Table_priv"), SQLDataType.VARCHAR(98).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mysql.tables_priv.Column_priv</code>.
     */
    public final TableField<TablesPrivRecord, String> COLUMN_PRIV = createField(DSL.name("Column_priv"), SQLDataType.VARCHAR(31).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private JTablesPriv(Name alias, Table<TablesPrivRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JTablesPriv(Name alias, Table<TablesPrivRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Table privileges"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.tables_priv</code> table reference
     */
    public JTablesPriv(String alias) {
        this(DSL.name(alias), TABLES_PRIV);
    }

    /**
     * Create an aliased <code>mysql.tables_priv</code> table reference
     */
    public JTablesPriv(Name alias) {
        this(alias, TABLES_PRIV);
    }

    /**
     * Create a <code>mysql.tables_priv</code> table reference
     */
    public JTablesPriv() {
        this(DSL.name("tables_priv"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TABLES_PRIV_GRANTOR);
    }

    @Override
    public UniqueKey<TablesPrivRecord> getPrimaryKey() {
        return Keys.KEY_TABLES_PRIV_PRIMARY;
    }

    @Override
    public JTablesPriv as(String alias) {
        return new JTablesPriv(DSL.name(alias), this);
    }

    @Override
    public JTablesPriv as(Name alias) {
        return new JTablesPriv(alias, this);
    }

    @Override
    public JTablesPriv as(Table<?> alias) {
        return new JTablesPriv(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTablesPriv rename(String name) {
        return new JTablesPriv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTablesPriv rename(Name name) {
        return new JTablesPriv(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTablesPriv rename(Table<?> name) {
        return new JTablesPriv(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTablesPriv where(Condition condition) {
        return new JTablesPriv(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTablesPriv where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTablesPriv where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTablesPriv where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTablesPriv where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTablesPriv where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTablesPriv where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTablesPriv where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTablesPriv whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTablesPriv whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
