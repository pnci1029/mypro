/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.generated.JMysql;
import org.jooq.generated.tables.records.SlowLogRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Slow log
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSlowLog extends TableImpl<SlowLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.slow_log</code>
     */
    public static final JSlowLog SLOW_LOG = new JSlowLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlowLogRecord> getRecordType() {
        return SlowLogRecord.class;
    }

    /**
     * The column <code>mysql.slow_log.start_time</code>.
     */
    public final TableField<SlowLogRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP(6)"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.slow_log.user_host</code>.
     */
    public final TableField<SlowLogRecord, String> USER_HOST = createField(DSL.name("user_host"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.query_time</code>.
     */
    public final TableField<SlowLogRecord, LocalTime> QUERY_TIME = createField(DSL.name("query_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.lock_time</code>.
     */
    public final TableField<SlowLogRecord, LocalTime> LOCK_TIME = createField(DSL.name("lock_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.rows_sent</code>.
     */
    public final TableField<SlowLogRecord, Integer> ROWS_SENT = createField(DSL.name("rows_sent"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.rows_examined</code>.
     */
    public final TableField<SlowLogRecord, Integer> ROWS_EXAMINED = createField(DSL.name("rows_examined"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.db</code>.
     */
    public final TableField<SlowLogRecord, String> DB = createField(DSL.name("db"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.last_insert_id</code>.
     */
    public final TableField<SlowLogRecord, Integer> LAST_INSERT_ID = createField(DSL.name("last_insert_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.insert_id</code>.
     */
    public final TableField<SlowLogRecord, Integer> INSERT_ID = createField(DSL.name("insert_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.server_id</code>.
     */
    public final TableField<SlowLogRecord, UInteger> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.sql_text</code>.
     */
    public final TableField<SlowLogRecord, byte[]> SQL_TEXT = createField(DSL.name("sql_text"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slow_log.thread_id</code>.
     */
    public final TableField<SlowLogRecord, ULong> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private JSlowLog(Name alias, Table<SlowLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JSlowLog(Name alias, Table<SlowLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Slow log"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.slow_log</code> table reference
     */
    public JSlowLog(String alias) {
        this(DSL.name(alias), SLOW_LOG);
    }

    /**
     * Create an aliased <code>mysql.slow_log</code> table reference
     */
    public JSlowLog(Name alias) {
        this(alias, SLOW_LOG);
    }

    /**
     * Create a <code>mysql.slow_log</code> table reference
     */
    public JSlowLog() {
        this(DSL.name("slow_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public JSlowLog as(String alias) {
        return new JSlowLog(DSL.name(alias), this);
    }

    @Override
    public JSlowLog as(Name alias) {
        return new JSlowLog(alias, this);
    }

    @Override
    public JSlowLog as(Table<?> alias) {
        return new JSlowLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSlowLog rename(String name) {
        return new JSlowLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSlowLog rename(Name name) {
        return new JSlowLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSlowLog rename(Table<?> name) {
        return new JSlowLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlowLog where(Condition condition) {
        return new JSlowLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlowLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlowLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlowLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlowLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlowLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlowLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlowLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlowLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlowLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
