/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.ComponentRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Components
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Component extends TableImpl<ComponentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.component</code>
     */
    public static final Component COMPONENT = new Component();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponentRecord> getRecordType() {
        return ComponentRecord.class;
    }

    /**
     * The column <code>mysql.component.component_id</code>.
     */
    public final TableField<ComponentRecord, UInteger> COMPONENT_ID = createField(DSL.name("component_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mysql.component.component_group_id</code>.
     */
    public final TableField<ComponentRecord, UInteger> COMPONENT_GROUP_ID = createField(DSL.name("component_group_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.component.component_urn</code>.
     */
    public final TableField<ComponentRecord, String> COMPONENT_URN = createField(DSL.name("component_urn"), SQLDataType.CLOB.nullable(false), this, "");

    private Component(Name alias, Table<ComponentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Component(Name alias, Table<ComponentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Components"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.component</code> table reference
     */
    public Component(String alias) {
        this(DSL.name(alias), COMPONENT);
    }

    /**
     * Create an aliased <code>mysql.component</code> table reference
     */
    public Component(Name alias) {
        this(alias, COMPONENT);
    }

    /**
     * Create a <code>mysql.component</code> table reference
     */
    public Component() {
        this(DSL.name("component"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public Identity<ComponentRecord, UInteger> getIdentity() {
        return (Identity<ComponentRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComponentRecord> getPrimaryKey() {
        return Keys.KEY_COMPONENT_PRIMARY;
    }

    @Override
    public Component as(String alias) {
        return new Component(DSL.name(alias), this);
    }

    @Override
    public Component as(Name alias) {
        return new Component(alias, this);
    }

    @Override
    public Component as(Table<?> alias) {
        return new Component(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(String name) {
        return new Component(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(Name name) {
        return new Component(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Component rename(Table<?> name) {
        return new Component(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Condition condition) {
        return new Component(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Component where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Component whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
