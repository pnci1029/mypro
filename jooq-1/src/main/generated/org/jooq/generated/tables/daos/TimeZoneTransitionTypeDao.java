/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.generated.tables.JTimeZoneTransitionType;
import org.jooq.generated.tables.pojos.TimeZoneTransitionType;
import org.jooq.generated.tables.records.TimeZoneTransitionTypeRecord;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * Time zone transition types
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeZoneTransitionTypeDao extends DAOImpl<TimeZoneTransitionTypeRecord, TimeZoneTransitionType, Record2<UInteger, UInteger>> {

    /**
     * Create a new TimeZoneTransitionTypeDao without any configuration
     */
    public TimeZoneTransitionTypeDao() {
        super(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE, TimeZoneTransitionType.class);
    }

    /**
     * Create a new TimeZoneTransitionTypeDao with an attached configuration
     */
    public TimeZoneTransitionTypeDao(Configuration configuration) {
        super(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE, TimeZoneTransitionType.class, configuration);
    }

    @Override
    public Record2<UInteger, UInteger> getId(TimeZoneTransitionType object) {
        return compositeKeyRecord(object.getTimeZoneId(), object.getTransitionTypeId());
    }

    /**
     * Fetch records that have <code>Time_zone_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimeZoneTransitionType> fetchRangeOfJTimeZoneId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TIME_ZONE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Time_zone_id IN (values)</code>
     */
    public List<TimeZoneTransitionType> fetchByJTimeZoneId(UInteger... values) {
        return fetch(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TIME_ZONE_ID, values);
    }

    /**
     * Fetch records that have <code>Transition_type_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<TimeZoneTransitionType> fetchRangeOfJTransitionTypeId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TRANSITION_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Transition_type_id IN (values)</code>
     */
    public List<TimeZoneTransitionType> fetchByJTransitionTypeId(UInteger... values) {
        return fetch(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TRANSITION_TYPE_ID, values);
    }

    /**
     * Fetch records that have <code>Offset BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimeZoneTransitionType> fetchRangeOfJOffset(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.OFFSET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Offset IN (values)</code>
     */
    public List<TimeZoneTransitionType> fetchByJOffset(Integer... values) {
        return fetch(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.OFFSET, values);
    }

    /**
     * Fetch records that have <code>Is_DST BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimeZoneTransitionType> fetchRangeOfJIsDst(UByte lowerInclusive, UByte upperInclusive) {
        return fetchRange(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.IS_DST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Is_DST IN (values)</code>
     */
    public List<TimeZoneTransitionType> fetchByJIsDst(UByte... values) {
        return fetch(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.IS_DST, values);
    }

    /**
     * Fetch records that have <code>Abbreviation BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimeZoneTransitionType> fetchRangeOfJAbbreviation(String lowerInclusive, String upperInclusive) {
        return fetchRange(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.ABBREVIATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Abbreviation IN (values)</code>
     */
    public List<TimeZoneTransitionType> fetchByJAbbreviation(String... values) {
        return fetch(JTimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.ABBREVIATION, values);
    }
}
