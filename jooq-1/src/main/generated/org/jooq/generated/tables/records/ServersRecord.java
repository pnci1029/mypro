/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record1;
import org.jooq.generated.tables.Servers;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * MySQL Foreign Servers table
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServersRecord extends UpdatableRecordImpl<ServersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.servers.Server_name</code>.
     */
    public ServersRecord setServerName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Server_name</code>.
     */
    public String getServerName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mysql.servers.Host</code>.
     */
    public ServersRecord setHost(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Host</code>.
     */
    public String getHost() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.servers.Db</code>.
     */
    public ServersRecord setDb(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Db</code>.
     */
    public String getDb() {
        return (String) get(2);
    }

    /**
     * Setter for <code>mysql.servers.Username</code>.
     */
    public ServersRecord setUsername(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Username</code>.
     */
    public String getUsername() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.servers.Password</code>.
     */
    public ServersRecord setPassword(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Password</code>.
     */
    public String getPassword() {
        return (String) get(4);
    }

    /**
     * Setter for <code>mysql.servers.Port</code>.
     */
    public ServersRecord setPort(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Port</code>.
     */
    public Integer getPort() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>mysql.servers.Socket</code>.
     */
    public ServersRecord setSocket(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Socket</code>.
     */
    public String getSocket() {
        return (String) get(6);
    }

    /**
     * Setter for <code>mysql.servers.Wrapper</code>.
     */
    public ServersRecord setWrapper(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Wrapper</code>.
     */
    public String getWrapper() {
        return (String) get(7);
    }

    /**
     * Setter for <code>mysql.servers.Owner</code>.
     */
    public ServersRecord setOwner(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>mysql.servers.Owner</code>.
     */
    public String getOwner() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServersRecord
     */
    public ServersRecord() {
        super(Servers.SERVERS);
    }

    /**
     * Create a detached, initialised ServersRecord
     */
    public ServersRecord(String serverName, String host, String db, String username, String password, Integer port, String socket, String wrapper, String owner) {
        super(Servers.SERVERS);

        setServerName(serverName);
        setHost(host);
        setDb(db);
        setUsername(username);
        setPassword(password);
        setPort(port);
        setSocket(socket);
        setWrapper(wrapper);
        setOwner(owner);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ServersRecord
     */
    public ServersRecord(org.jooq.generated.tables.pojos.Servers value) {
        super(Servers.SERVERS);

        if (value != null) {
            setServerName(value.getServerName());
            setHost(value.getHost());
            setDb(value.getDb());
            setUsername(value.getUsername());
            setPassword(value.getPassword());
            setPort(value.getPort());
            setSocket(value.getSocket());
            setWrapper(value.getWrapper());
            setOwner(value.getOwner());
            resetChangedOnNotNull();
        }
    }
}
