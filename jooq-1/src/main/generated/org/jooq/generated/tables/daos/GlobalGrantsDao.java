/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record3;
import org.jooq.generated.enums.GlobalGrantsWithGrantOption;
import org.jooq.generated.tables.GlobalGrants;
import org.jooq.generated.tables.records.GlobalGrantsRecord;
import org.jooq.impl.DAOImpl;


/**
 * Extended global grants
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GlobalGrantsDao extends DAOImpl<GlobalGrantsRecord, org.jooq.generated.tables.pojos.GlobalGrants, Record3<String, String, String>> {

    /**
     * Create a new GlobalGrantsDao without any configuration
     */
    public GlobalGrantsDao() {
        super(GlobalGrants.GLOBAL_GRANTS, org.jooq.generated.tables.pojos.GlobalGrants.class);
    }

    /**
     * Create a new GlobalGrantsDao with an attached configuration
     */
    public GlobalGrantsDao(Configuration configuration) {
        super(GlobalGrants.GLOBAL_GRANTS, org.jooq.generated.tables.pojos.GlobalGrants.class, configuration);
    }

    @Override
    public Record3<String, String, String> getId(org.jooq.generated.tables.pojos.GlobalGrants object) {
        return compositeKeyRecord(object.getUser(), object.getHost(), object.getPriv());
    }

    /**
     * Fetch records that have <code>USER BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchRangeOfUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(GlobalGrants.GLOBAL_GRANTS.USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchByUser(String... values) {
        return fetch(GlobalGrants.GLOBAL_GRANTS.USER, values);
    }

    /**
     * Fetch records that have <code>HOST BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchRangeOfHost(String lowerInclusive, String upperInclusive) {
        return fetchRange(GlobalGrants.GLOBAL_GRANTS.HOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>HOST IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchByHost(String... values) {
        return fetch(GlobalGrants.GLOBAL_GRANTS.HOST, values);
    }

    /**
     * Fetch records that have <code>PRIV BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchRangeOfPriv(String lowerInclusive, String upperInclusive) {
        return fetchRange(GlobalGrants.GLOBAL_GRANTS.PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PRIV IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchByPriv(String... values) {
        return fetch(GlobalGrants.GLOBAL_GRANTS.PRIV, values);
    }

    /**
     * Fetch records that have <code>WITH_GRANT_OPTION BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchRangeOfWithGrantOption(GlobalGrantsWithGrantOption lowerInclusive, GlobalGrantsWithGrantOption upperInclusive) {
        return fetchRange(GlobalGrants.GLOBAL_GRANTS.WITH_GRANT_OPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>WITH_GRANT_OPTION IN (values)</code>
     */
    public List<org.jooq.generated.tables.pojos.GlobalGrants> fetchByWithGrantOption(GlobalGrantsWithGrantOption... values) {
        return fetch(GlobalGrants.GLOBAL_GRANTS.WITH_GRANT_OPTION, values);
    }
}
