/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record3;
import org.jooq.generated.tables.JPasswordHistory;
import org.jooq.generated.tables.pojos.PasswordHistory;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Password history for user accounts
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordHistoryRecord extends UpdatableRecordImpl<PasswordHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.password_history.Host</code>.
     */
    public PasswordHistoryRecord setHost(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.Host</code>.
     */
    public String getHost() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mysql.password_history.User</code>.
     */
    public PasswordHistoryRecord setUser(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.User</code>.
     */
    public String getUser() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.password_history.Password_timestamp</code>.
     */
    public PasswordHistoryRecord setPasswordTimestamp(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.Password_timestamp</code>.
     */
    public LocalDateTime getPasswordTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>mysql.password_history.Password</code>.
     */
    public PasswordHistoryRecord setPassword(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.Password</code>.
     */
    public String getPassword() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<String, String, LocalDateTime> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PasswordHistoryRecord
     */
    public PasswordHistoryRecord() {
        super(JPasswordHistory.PASSWORD_HISTORY);
    }

    /**
     * Create a detached, initialised PasswordHistoryRecord
     */
    public PasswordHistoryRecord(String host, String user, LocalDateTime passwordTimestamp, String password) {
        super(JPasswordHistory.PASSWORD_HISTORY);

        setHost(host);
        setUser(user);
        setPasswordTimestamp(passwordTimestamp);
        setPassword(password);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PasswordHistoryRecord
     */
    public PasswordHistoryRecord(PasswordHistory value) {
        super(JPasswordHistory.PASSWORD_HISTORY);

        if (value != null) {
            setHost(value.getHost());
            setUser(value.getUser());
            setPasswordTimestamp(value.getPasswordTimestamp());
            setPassword(value.getPassword());
            resetChangedOnNotNull();
        }
    }
}
