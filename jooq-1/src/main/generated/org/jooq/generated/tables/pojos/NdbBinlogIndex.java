/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NdbBinlogIndex implements Serializable {

    private static final long serialVersionUID = 1L;

    private ULong position;
    private String file;
    private ULong epoch;
    private UInteger inserts;
    private UInteger updates;
    private UInteger deletes;
    private UInteger schemaops;
    private UInteger origServerId;
    private ULong origEpoch;
    private UInteger gci;
    private ULong nextPosition;
    private String nextFile;

    public NdbBinlogIndex() {}

    public NdbBinlogIndex(NdbBinlogIndex value) {
        this.position = value.position;
        this.file = value.file;
        this.epoch = value.epoch;
        this.inserts = value.inserts;
        this.updates = value.updates;
        this.deletes = value.deletes;
        this.schemaops = value.schemaops;
        this.origServerId = value.origServerId;
        this.origEpoch = value.origEpoch;
        this.gci = value.gci;
        this.nextPosition = value.nextPosition;
        this.nextFile = value.nextFile;
    }

    public NdbBinlogIndex(
        ULong position,
        String file,
        ULong epoch,
        UInteger inserts,
        UInteger updates,
        UInteger deletes,
        UInteger schemaops,
        UInteger origServerId,
        ULong origEpoch,
        UInteger gci,
        ULong nextPosition,
        String nextFile
    ) {
        this.position = position;
        this.file = file;
        this.epoch = epoch;
        this.inserts = inserts;
        this.updates = updates;
        this.deletes = deletes;
        this.schemaops = schemaops;
        this.origServerId = origServerId;
        this.origEpoch = origEpoch;
        this.gci = gci;
        this.nextPosition = nextPosition;
        this.nextFile = nextFile;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.Position</code>.
     */
    public ULong getPosition() {
        return this.position;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.Position</code>.
     */
    public NdbBinlogIndex setPosition(ULong position) {
        this.position = position;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.File</code>.
     */
    public String getFile() {
        return this.file;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.File</code>.
     */
    public NdbBinlogIndex setFile(String file) {
        this.file = file;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.epoch</code>.
     */
    public ULong getEpoch() {
        return this.epoch;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.epoch</code>.
     */
    public NdbBinlogIndex setEpoch(ULong epoch) {
        this.epoch = epoch;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.inserts</code>.
     */
    public UInteger getInserts() {
        return this.inserts;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.inserts</code>.
     */
    public NdbBinlogIndex setInserts(UInteger inserts) {
        this.inserts = inserts;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.updates</code>.
     */
    public UInteger getUpdates() {
        return this.updates;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.updates</code>.
     */
    public NdbBinlogIndex setUpdates(UInteger updates) {
        this.updates = updates;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.deletes</code>.
     */
    public UInteger getDeletes() {
        return this.deletes;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.deletes</code>.
     */
    public NdbBinlogIndex setDeletes(UInteger deletes) {
        this.deletes = deletes;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    public UInteger getSchemaops() {
        return this.schemaops;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    public NdbBinlogIndex setSchemaops(UInteger schemaops) {
        this.schemaops = schemaops;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    public UInteger getOrigServerId() {
        return this.origServerId;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    public NdbBinlogIndex setOrigServerId(UInteger origServerId) {
        this.origServerId = origServerId;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    public ULong getOrigEpoch() {
        return this.origEpoch;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    public NdbBinlogIndex setOrigEpoch(ULong origEpoch) {
        this.origEpoch = origEpoch;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.gci</code>.
     */
    public UInteger getGci() {
        return this.gci;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.gci</code>.
     */
    public NdbBinlogIndex setGci(UInteger gci) {
        this.gci = gci;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.next_position</code>.
     */
    public ULong getNextPosition() {
        return this.nextPosition;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.next_position</code>.
     */
    public NdbBinlogIndex setNextPosition(ULong nextPosition) {
        this.nextPosition = nextPosition;
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.next_file</code>.
     */
    public String getNextFile() {
        return this.nextFile;
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.next_file</code>.
     */
    public NdbBinlogIndex setNextFile(String nextFile) {
        this.nextFile = nextFile;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final NdbBinlogIndex other = (NdbBinlogIndex) obj;
        if (this.position == null) {
            if (other.position != null)
                return false;
        }
        else if (!this.position.equals(other.position))
            return false;
        if (this.file == null) {
            if (other.file != null)
                return false;
        }
        else if (!this.file.equals(other.file))
            return false;
        if (this.epoch == null) {
            if (other.epoch != null)
                return false;
        }
        else if (!this.epoch.equals(other.epoch))
            return false;
        if (this.inserts == null) {
            if (other.inserts != null)
                return false;
        }
        else if (!this.inserts.equals(other.inserts))
            return false;
        if (this.updates == null) {
            if (other.updates != null)
                return false;
        }
        else if (!this.updates.equals(other.updates))
            return false;
        if (this.deletes == null) {
            if (other.deletes != null)
                return false;
        }
        else if (!this.deletes.equals(other.deletes))
            return false;
        if (this.schemaops == null) {
            if (other.schemaops != null)
                return false;
        }
        else if (!this.schemaops.equals(other.schemaops))
            return false;
        if (this.origServerId == null) {
            if (other.origServerId != null)
                return false;
        }
        else if (!this.origServerId.equals(other.origServerId))
            return false;
        if (this.origEpoch == null) {
            if (other.origEpoch != null)
                return false;
        }
        else if (!this.origEpoch.equals(other.origEpoch))
            return false;
        if (this.gci == null) {
            if (other.gci != null)
                return false;
        }
        else if (!this.gci.equals(other.gci))
            return false;
        if (this.nextPosition == null) {
            if (other.nextPosition != null)
                return false;
        }
        else if (!this.nextPosition.equals(other.nextPosition))
            return false;
        if (this.nextFile == null) {
            if (other.nextFile != null)
                return false;
        }
        else if (!this.nextFile.equals(other.nextFile))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.position == null) ? 0 : this.position.hashCode());
        result = prime * result + ((this.file == null) ? 0 : this.file.hashCode());
        result = prime * result + ((this.epoch == null) ? 0 : this.epoch.hashCode());
        result = prime * result + ((this.inserts == null) ? 0 : this.inserts.hashCode());
        result = prime * result + ((this.updates == null) ? 0 : this.updates.hashCode());
        result = prime * result + ((this.deletes == null) ? 0 : this.deletes.hashCode());
        result = prime * result + ((this.schemaops == null) ? 0 : this.schemaops.hashCode());
        result = prime * result + ((this.origServerId == null) ? 0 : this.origServerId.hashCode());
        result = prime * result + ((this.origEpoch == null) ? 0 : this.origEpoch.hashCode());
        result = prime * result + ((this.gci == null) ? 0 : this.gci.hashCode());
        result = prime * result + ((this.nextPosition == null) ? 0 : this.nextPosition.hashCode());
        result = prime * result + ((this.nextFile == null) ? 0 : this.nextFile.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("NdbBinlogIndex (");

        sb.append(position);
        sb.append(", ").append(file);
        sb.append(", ").append(epoch);
        sb.append(", ").append(inserts);
        sb.append(", ").append(updates);
        sb.append(", ").append(deletes);
        sb.append(", ").append(schemaops);
        sb.append(", ").append(origServerId);
        sb.append(", ").append(origEpoch);
        sb.append(", ").append(gci);
        sb.append(", ").append(nextPosition);
        sb.append(", ").append(nextFile);

        sb.append(")");
        return sb.toString();
    }
}
