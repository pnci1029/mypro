/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record2;
import org.jooq.generated.tables.SlaveWorkerInfo;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Worker Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveWorkerInfoRecord extends UpdatableRecordImpl<SlaveWorkerInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.slave_worker_info.Id</code>.
     */
    public SlaveWorkerInfoRecord setId(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Relay_log_name</code>.
     */
    public SlaveWorkerInfoRecord setRelayLogName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Relay_log_name</code>.
     */
    public String getRelayLogName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Relay_log_pos</code>.
     */
    public SlaveWorkerInfoRecord setRelayLogPos(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Relay_log_pos</code>.
     */
    public ULong getRelayLogPos() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Master_log_name</code>.
     */
    public SlaveWorkerInfoRecord setMasterLogName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Master_log_name</code>.
     */
    public String getMasterLogName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Master_log_pos</code>.
     */
    public SlaveWorkerInfoRecord setMasterLogPos(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Master_log_pos</code>.
     */
    public ULong getMasterLogPos() {
        return (ULong) get(4);
    }

    /**
     * Setter for
     * <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointRelayLogName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
     */
    public String getCheckpointRelayLogName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointRelayLogPos(ULong value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
     */
    public ULong getCheckpointRelayLogPos() {
        return (ULong) get(6);
    }

    /**
     * Setter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointMasterLogName(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
     */
    public String getCheckpointMasterLogName() {
        return (String) get(7);
    }

    /**
     * Setter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointMasterLogPos(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
     */
    public ULong getCheckpointMasterLogPos() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointSeqno(UInteger value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
     */
    public UInteger getCheckpointSeqno() {
        return (UInteger) get(9);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointGroupSize(UInteger value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
     */
    public UInteger getCheckpointGroupSize() {
        return (UInteger) get(10);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
     */
    public SlaveWorkerInfoRecord setCheckpointGroupBitmap(byte[] value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
     */
    public byte[] getCheckpointGroupBitmap() {
        return (byte[]) get(11);
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public SlaveWorkerInfoRecord setChannelName(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public String getChannelName() {
        return (String) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, UInteger> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SlaveWorkerInfoRecord
     */
    public SlaveWorkerInfoRecord() {
        super(SlaveWorkerInfo.SLAVE_WORKER_INFO);
    }

    /**
     * Create a detached, initialised SlaveWorkerInfoRecord
     */
    public SlaveWorkerInfoRecord(UInteger id, String relayLogName, ULong relayLogPos, String masterLogName, ULong masterLogPos, String checkpointRelayLogName, ULong checkpointRelayLogPos, String checkpointMasterLogName, ULong checkpointMasterLogPos, UInteger checkpointSeqno, UInteger checkpointGroupSize, byte[] checkpointGroupBitmap, String channelName) {
        super(SlaveWorkerInfo.SLAVE_WORKER_INFO);

        setId(id);
        setRelayLogName(relayLogName);
        setRelayLogPos(relayLogPos);
        setMasterLogName(masterLogName);
        setMasterLogPos(masterLogPos);
        setCheckpointRelayLogName(checkpointRelayLogName);
        setCheckpointRelayLogPos(checkpointRelayLogPos);
        setCheckpointMasterLogName(checkpointMasterLogName);
        setCheckpointMasterLogPos(checkpointMasterLogPos);
        setCheckpointSeqno(checkpointSeqno);
        setCheckpointGroupSize(checkpointGroupSize);
        setCheckpointGroupBitmap(checkpointGroupBitmap);
        setChannelName(channelName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SlaveWorkerInfoRecord
     */
    public SlaveWorkerInfoRecord(org.jooq.generated.tables.pojos.SlaveWorkerInfo value) {
        super(SlaveWorkerInfo.SLAVE_WORKER_INFO);

        if (value != null) {
            setId(value.getId());
            setRelayLogName(value.getRelayLogName());
            setRelayLogPos(value.getRelayLogPos());
            setMasterLogName(value.getMasterLogName());
            setMasterLogPos(value.getMasterLogPos());
            setCheckpointRelayLogName(value.getCheckpointRelayLogName());
            setCheckpointRelayLogPos(value.getCheckpointRelayLogPos());
            setCheckpointMasterLogName(value.getCheckpointMasterLogName());
            setCheckpointMasterLogPos(value.getCheckpointMasterLogPos());
            setCheckpointSeqno(value.getCheckpointSeqno());
            setCheckpointGroupSize(value.getCheckpointGroupSize());
            setCheckpointGroupBitmap(value.getCheckpointGroupBitmap());
            setChannelName(value.getChannelName());
            resetChangedOnNotNull();
        }
    }
}
