/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.enums.GlobalGrantsWithGrantOption;
import org.jooq.generated.tables.records.GlobalGrantsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Extended global grants
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GlobalGrants extends TableImpl<GlobalGrantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.global_grants</code>
     */
    public static final GlobalGrants GLOBAL_GRANTS = new GlobalGrants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GlobalGrantsRecord> getRecordType() {
        return GlobalGrantsRecord.class;
    }

    /**
     * The column <code>mysql.global_grants.USER</code>.
     */
    public final TableField<GlobalGrantsRecord, String> USER = createField(DSL.name("USER"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.global_grants.HOST</code>.
     */
    public final TableField<GlobalGrantsRecord, String> HOST = createField(DSL.name("HOST"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.global_grants.PRIV</code>.
     */
    public final TableField<GlobalGrantsRecord, String> PRIV = createField(DSL.name("PRIV"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.global_grants.WITH_GRANT_OPTION</code>.
     */
    public final TableField<GlobalGrantsRecord, GlobalGrantsWithGrantOption> WITH_GRANT_OPTION = createField(DSL.name("WITH_GRANT_OPTION"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(GlobalGrantsWithGrantOption.class), this, "");

    private GlobalGrants(Name alias, Table<GlobalGrantsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GlobalGrants(Name alias, Table<GlobalGrantsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Extended global grants"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.global_grants</code> table reference
     */
    public GlobalGrants(String alias) {
        this(DSL.name(alias), GLOBAL_GRANTS);
    }

    /**
     * Create an aliased <code>mysql.global_grants</code> table reference
     */
    public GlobalGrants(Name alias) {
        this(alias, GLOBAL_GRANTS);
    }

    /**
     * Create a <code>mysql.global_grants</code> table reference
     */
    public GlobalGrants() {
        this(DSL.name("global_grants"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<GlobalGrantsRecord> getPrimaryKey() {
        return Keys.KEY_GLOBAL_GRANTS_PRIMARY;
    }

    @Override
    public GlobalGrants as(String alias) {
        return new GlobalGrants(DSL.name(alias), this);
    }

    @Override
    public GlobalGrants as(Name alias) {
        return new GlobalGrants(alias, this);
    }

    @Override
    public GlobalGrants as(Table<?> alias) {
        return new GlobalGrants(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalGrants rename(String name) {
        return new GlobalGrants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalGrants rename(Name name) {
        return new GlobalGrants(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GlobalGrants rename(Table<?> name) {
        return new GlobalGrants(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GlobalGrants where(Condition condition) {
        return new GlobalGrants(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GlobalGrants where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GlobalGrants where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GlobalGrants where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GlobalGrants where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GlobalGrants where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GlobalGrants where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GlobalGrants where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GlobalGrants whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GlobalGrants whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
