/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.ServerCostRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerCost extends TableImpl<ServerCostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.server_cost</code>
     */
    public static final ServerCost SERVER_COST = new ServerCost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerCostRecord> getRecordType() {
        return ServerCostRecord.class;
    }

    /**
     * The column <code>mysql.server_cost.cost_name</code>.
     */
    public final TableField<ServerCostRecord, String> COST_NAME = createField(DSL.name("cost_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.server_cost.cost_value</code>.
     */
    public final TableField<ServerCostRecord, Double> COST_VALUE = createField(DSL.name("cost_value"), SQLDataType.FLOAT, this, "");

    /**
     * The column <code>mysql.server_cost.last_update</code>.
     */
    public final TableField<ServerCostRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.server_cost.comment</code>.
     */
    public final TableField<ServerCostRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>mysql.server_cost.default_value</code>.
     */
    public final TableField<ServerCostRecord, Double> DEFAULT_VALUE = createField(DSL.name("default_value"), SQLDataType.FLOAT, this, "");

    private ServerCost(Name alias, Table<ServerCostRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServerCost(Name alias, Table<ServerCostRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.server_cost</code> table reference
     */
    public ServerCost(String alias) {
        this(DSL.name(alias), SERVER_COST);
    }

    /**
     * Create an aliased <code>mysql.server_cost</code> table reference
     */
    public ServerCost(Name alias) {
        this(alias, SERVER_COST);
    }

    /**
     * Create a <code>mysql.server_cost</code> table reference
     */
    public ServerCost() {
        this(DSL.name("server_cost"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<ServerCostRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_COST_PRIMARY;
    }

    @Override
    public ServerCost as(String alias) {
        return new ServerCost(DSL.name(alias), this);
    }

    @Override
    public ServerCost as(Name alias) {
        return new ServerCost(alias, this);
    }

    @Override
    public ServerCost as(Table<?> alias) {
        return new ServerCost(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerCost rename(String name) {
        return new ServerCost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerCost rename(Name name) {
        return new ServerCost(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerCost rename(Table<?> name) {
        return new ServerCost(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerCost where(Condition condition) {
        return new ServerCost(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerCost where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerCost where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerCost where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerCost where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerCost where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerCost where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerCost where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerCost whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerCost whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
