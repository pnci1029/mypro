/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.SlaveWorkerInfoRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Worker Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JSlaveWorkerInfo extends TableImpl<SlaveWorkerInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.slave_worker_info</code>
     */
    public static final JSlaveWorkerInfo SLAVE_WORKER_INFO = new JSlaveWorkerInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlaveWorkerInfoRecord> getRecordType() {
        return SlaveWorkerInfoRecord.class;
    }

    /**
     * The column <code>mysql.slave_worker_info.Id</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, UInteger> ID = createField(DSL.name("Id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Relay_log_name</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, String> RELAY_LOG_NAME = createField(DSL.name("Relay_log_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Relay_log_pos</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, ULong> RELAY_LOG_POS = createField(DSL.name("Relay_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Master_log_name</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, String> MASTER_LOG_NAME = createField(DSL.name("Master_log_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Master_log_pos</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, ULong> MASTER_LOG_POS = createField(DSL.name("Master_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, String> CHECKPOINT_RELAY_LOG_NAME = createField(DSL.name("Checkpoint_relay_log_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, ULong> CHECKPOINT_RELAY_LOG_POS = createField(DSL.name("Checkpoint_relay_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, String> CHECKPOINT_MASTER_LOG_NAME = createField(DSL.name("Checkpoint_master_log_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, ULong> CHECKPOINT_MASTER_LOG_POS = createField(DSL.name("Checkpoint_master_log_pos"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, UInteger> CHECKPOINT_SEQNO = createField(DSL.name("Checkpoint_seqno"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, UInteger> CHECKPOINT_GROUP_SIZE = createField(DSL.name("Checkpoint_group_size"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
     */
    public final TableField<SlaveWorkerInfoRecord, byte[]> CHECKPOINT_GROUP_BITMAP = createField(DSL.name("Checkpoint_group_bitmap"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.slave_worker_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public final TableField<SlaveWorkerInfoRecord, String> CHANNEL_NAME = createField(DSL.name("Channel_name"), SQLDataType.VARCHAR(64).nullable(false), this, "The channel on which the replica is connected to a source. Used in Multisource Replication");

    private JSlaveWorkerInfo(Name alias, Table<SlaveWorkerInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JSlaveWorkerInfo(Name alias, Table<SlaveWorkerInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Worker Information"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.slave_worker_info</code> table reference
     */
    public JSlaveWorkerInfo(String alias) {
        this(DSL.name(alias), SLAVE_WORKER_INFO);
    }

    /**
     * Create an aliased <code>mysql.slave_worker_info</code> table reference
     */
    public JSlaveWorkerInfo(Name alias) {
        this(alias, SLAVE_WORKER_INFO);
    }

    /**
     * Create a <code>mysql.slave_worker_info</code> table reference
     */
    public JSlaveWorkerInfo() {
        this(DSL.name("slave_worker_info"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<SlaveWorkerInfoRecord> getPrimaryKey() {
        return Keys.KEY_SLAVE_WORKER_INFO_PRIMARY;
    }

    @Override
    public JSlaveWorkerInfo as(String alias) {
        return new JSlaveWorkerInfo(DSL.name(alias), this);
    }

    @Override
    public JSlaveWorkerInfo as(Name alias) {
        return new JSlaveWorkerInfo(alias, this);
    }

    @Override
    public JSlaveWorkerInfo as(Table<?> alias) {
        return new JSlaveWorkerInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSlaveWorkerInfo rename(String name) {
        return new JSlaveWorkerInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSlaveWorkerInfo rename(Name name) {
        return new JSlaveWorkerInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSlaveWorkerInfo rename(Table<?> name) {
        return new JSlaveWorkerInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlaveWorkerInfo where(Condition condition) {
        return new JSlaveWorkerInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlaveWorkerInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlaveWorkerInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlaveWorkerInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlaveWorkerInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlaveWorkerInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlaveWorkerInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSlaveWorkerInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlaveWorkerInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSlaveWorkerInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
