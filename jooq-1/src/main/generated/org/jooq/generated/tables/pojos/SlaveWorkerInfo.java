/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.util.Arrays;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Worker Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveWorkerInfo implements Serializable {

    private static final long serialVersionUID = 1L;

    private UInteger id;
    private String relayLogName;
    private ULong relayLogPos;
    private String masterLogName;
    private ULong masterLogPos;
    private String checkpointRelayLogName;
    private ULong checkpointRelayLogPos;
    private String checkpointMasterLogName;
    private ULong checkpointMasterLogPos;
    private UInteger checkpointSeqno;
    private UInteger checkpointGroupSize;
    private byte[] checkpointGroupBitmap;
    private String channelName;

    public SlaveWorkerInfo() {}

    public SlaveWorkerInfo(SlaveWorkerInfo value) {
        this.id = value.id;
        this.relayLogName = value.relayLogName;
        this.relayLogPos = value.relayLogPos;
        this.masterLogName = value.masterLogName;
        this.masterLogPos = value.masterLogPos;
        this.checkpointRelayLogName = value.checkpointRelayLogName;
        this.checkpointRelayLogPos = value.checkpointRelayLogPos;
        this.checkpointMasterLogName = value.checkpointMasterLogName;
        this.checkpointMasterLogPos = value.checkpointMasterLogPos;
        this.checkpointSeqno = value.checkpointSeqno;
        this.checkpointGroupSize = value.checkpointGroupSize;
        this.checkpointGroupBitmap = value.checkpointGroupBitmap;
        this.channelName = value.channelName;
    }

    public SlaveWorkerInfo(
        UInteger id,
        String relayLogName,
        ULong relayLogPos,
        String masterLogName,
        ULong masterLogPos,
        String checkpointRelayLogName,
        ULong checkpointRelayLogPos,
        String checkpointMasterLogName,
        ULong checkpointMasterLogPos,
        UInteger checkpointSeqno,
        UInteger checkpointGroupSize,
        byte[] checkpointGroupBitmap,
        String channelName
    ) {
        this.id = id;
        this.relayLogName = relayLogName;
        this.relayLogPos = relayLogPos;
        this.masterLogName = masterLogName;
        this.masterLogPos = masterLogPos;
        this.checkpointRelayLogName = checkpointRelayLogName;
        this.checkpointRelayLogPos = checkpointRelayLogPos;
        this.checkpointMasterLogName = checkpointMasterLogName;
        this.checkpointMasterLogPos = checkpointMasterLogPos;
        this.checkpointSeqno = checkpointSeqno;
        this.checkpointGroupSize = checkpointGroupSize;
        this.checkpointGroupBitmap = checkpointGroupBitmap;
        this.channelName = channelName;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Id</code>.
     */
    public UInteger getId() {
        return this.id;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Id</code>.
     */
    public SlaveWorkerInfo setId(UInteger id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Relay_log_name</code>.
     */
    public String getRelayLogName() {
        return this.relayLogName;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Relay_log_name</code>.
     */
    public SlaveWorkerInfo setRelayLogName(String relayLogName) {
        this.relayLogName = relayLogName;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Relay_log_pos</code>.
     */
    public ULong getRelayLogPos() {
        return this.relayLogPos;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Relay_log_pos</code>.
     */
    public SlaveWorkerInfo setRelayLogPos(ULong relayLogPos) {
        this.relayLogPos = relayLogPos;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Master_log_name</code>.
     */
    public String getMasterLogName() {
        return this.masterLogName;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Master_log_name</code>.
     */
    public SlaveWorkerInfo setMasterLogName(String masterLogName) {
        this.masterLogName = masterLogName;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Master_log_pos</code>.
     */
    public ULong getMasterLogPos() {
        return this.masterLogPos;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Master_log_pos</code>.
     */
    public SlaveWorkerInfo setMasterLogPos(ULong masterLogPos) {
        this.masterLogPos = masterLogPos;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
     */
    public String getCheckpointRelayLogName() {
        return this.checkpointRelayLogName;
    }

    /**
     * Setter for
     * <code>mysql.slave_worker_info.Checkpoint_relay_log_name</code>.
     */
    public SlaveWorkerInfo setCheckpointRelayLogName(String checkpointRelayLogName) {
        this.checkpointRelayLogName = checkpointRelayLogName;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
     */
    public ULong getCheckpointRelayLogPos() {
        return this.checkpointRelayLogPos;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_relay_log_pos</code>.
     */
    public SlaveWorkerInfo setCheckpointRelayLogPos(ULong checkpointRelayLogPos) {
        this.checkpointRelayLogPos = checkpointRelayLogPos;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
     */
    public String getCheckpointMasterLogName() {
        return this.checkpointMasterLogName;
    }

    /**
     * Setter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_name</code>.
     */
    public SlaveWorkerInfo setCheckpointMasterLogName(String checkpointMasterLogName) {
        this.checkpointMasterLogName = checkpointMasterLogName;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
     */
    public ULong getCheckpointMasterLogPos() {
        return this.checkpointMasterLogPos;
    }

    /**
     * Setter for
     * <code>mysql.slave_worker_info.Checkpoint_master_log_pos</code>.
     */
    public SlaveWorkerInfo setCheckpointMasterLogPos(ULong checkpointMasterLogPos) {
        this.checkpointMasterLogPos = checkpointMasterLogPos;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
     */
    public UInteger getCheckpointSeqno() {
        return this.checkpointSeqno;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_seqno</code>.
     */
    public SlaveWorkerInfo setCheckpointSeqno(UInteger checkpointSeqno) {
        this.checkpointSeqno = checkpointSeqno;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
     */
    public UInteger getCheckpointGroupSize() {
        return this.checkpointGroupSize;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_group_size</code>.
     */
    public SlaveWorkerInfo setCheckpointGroupSize(UInteger checkpointGroupSize) {
        this.checkpointGroupSize = checkpointGroupSize;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
     */
    public byte[] getCheckpointGroupBitmap() {
        return this.checkpointGroupBitmap;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Checkpoint_group_bitmap</code>.
     */
    public SlaveWorkerInfo setCheckpointGroupBitmap(byte[] checkpointGroupBitmap) {
        this.checkpointGroupBitmap = checkpointGroupBitmap;
        return this;
    }

    /**
     * Getter for <code>mysql.slave_worker_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public String getChannelName() {
        return this.channelName;
    }

    /**
     * Setter for <code>mysql.slave_worker_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public SlaveWorkerInfo setChannelName(String channelName) {
        this.channelName = channelName;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final SlaveWorkerInfo other = (SlaveWorkerInfo) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.relayLogName == null) {
            if (other.relayLogName != null)
                return false;
        }
        else if (!this.relayLogName.equals(other.relayLogName))
            return false;
        if (this.relayLogPos == null) {
            if (other.relayLogPos != null)
                return false;
        }
        else if (!this.relayLogPos.equals(other.relayLogPos))
            return false;
        if (this.masterLogName == null) {
            if (other.masterLogName != null)
                return false;
        }
        else if (!this.masterLogName.equals(other.masterLogName))
            return false;
        if (this.masterLogPos == null) {
            if (other.masterLogPos != null)
                return false;
        }
        else if (!this.masterLogPos.equals(other.masterLogPos))
            return false;
        if (this.checkpointRelayLogName == null) {
            if (other.checkpointRelayLogName != null)
                return false;
        }
        else if (!this.checkpointRelayLogName.equals(other.checkpointRelayLogName))
            return false;
        if (this.checkpointRelayLogPos == null) {
            if (other.checkpointRelayLogPos != null)
                return false;
        }
        else if (!this.checkpointRelayLogPos.equals(other.checkpointRelayLogPos))
            return false;
        if (this.checkpointMasterLogName == null) {
            if (other.checkpointMasterLogName != null)
                return false;
        }
        else if (!this.checkpointMasterLogName.equals(other.checkpointMasterLogName))
            return false;
        if (this.checkpointMasterLogPos == null) {
            if (other.checkpointMasterLogPos != null)
                return false;
        }
        else if (!this.checkpointMasterLogPos.equals(other.checkpointMasterLogPos))
            return false;
        if (this.checkpointSeqno == null) {
            if (other.checkpointSeqno != null)
                return false;
        }
        else if (!this.checkpointSeqno.equals(other.checkpointSeqno))
            return false;
        if (this.checkpointGroupSize == null) {
            if (other.checkpointGroupSize != null)
                return false;
        }
        else if (!this.checkpointGroupSize.equals(other.checkpointGroupSize))
            return false;
        if (this.checkpointGroupBitmap == null) {
            if (other.checkpointGroupBitmap != null)
                return false;
        }
        else if (!Arrays.equals(this.checkpointGroupBitmap, other.checkpointGroupBitmap))
            return false;
        if (this.channelName == null) {
            if (other.channelName != null)
                return false;
        }
        else if (!this.channelName.equals(other.channelName))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.relayLogName == null) ? 0 : this.relayLogName.hashCode());
        result = prime * result + ((this.relayLogPos == null) ? 0 : this.relayLogPos.hashCode());
        result = prime * result + ((this.masterLogName == null) ? 0 : this.masterLogName.hashCode());
        result = prime * result + ((this.masterLogPos == null) ? 0 : this.masterLogPos.hashCode());
        result = prime * result + ((this.checkpointRelayLogName == null) ? 0 : this.checkpointRelayLogName.hashCode());
        result = prime * result + ((this.checkpointRelayLogPos == null) ? 0 : this.checkpointRelayLogPos.hashCode());
        result = prime * result + ((this.checkpointMasterLogName == null) ? 0 : this.checkpointMasterLogName.hashCode());
        result = prime * result + ((this.checkpointMasterLogPos == null) ? 0 : this.checkpointMasterLogPos.hashCode());
        result = prime * result + ((this.checkpointSeqno == null) ? 0 : this.checkpointSeqno.hashCode());
        result = prime * result + ((this.checkpointGroupSize == null) ? 0 : this.checkpointGroupSize.hashCode());
        result = prime * result + ((this.checkpointGroupBitmap == null) ? 0 : Arrays.hashCode(this.checkpointGroupBitmap));
        result = prime * result + ((this.channelName == null) ? 0 : this.channelName.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SlaveWorkerInfo (");

        sb.append(id);
        sb.append(", ").append(relayLogName);
        sb.append(", ").append(relayLogPos);
        sb.append(", ").append(masterLogName);
        sb.append(", ").append(masterLogPos);
        sb.append(", ").append(checkpointRelayLogName);
        sb.append(", ").append(checkpointRelayLogPos);
        sb.append(", ").append(checkpointMasterLogName);
        sb.append(", ").append(checkpointMasterLogPos);
        sb.append(", ").append(checkpointSeqno);
        sb.append(", ").append(checkpointGroupSize);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(channelName);

        sb.append(")");
        return sb.toString();
    }
}
