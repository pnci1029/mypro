/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.generated.JMysql;
import org.jooq.generated.tables.records.GeneralLogRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * General log
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JGeneralLog extends TableImpl<GeneralLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.general_log</code>
     */
    public static final JGeneralLog GENERAL_LOG = new JGeneralLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneralLogRecord> getRecordType() {
        return GeneralLogRecord.class;
    }

    /**
     * The column <code>mysql.general_log.event_time</code>.
     */
    public final TableField<GeneralLogRecord, LocalDateTime> EVENT_TIME = createField(DSL.name("event_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP(6)"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.general_log.user_host</code>.
     */
    public final TableField<GeneralLogRecord, String> USER_HOST = createField(DSL.name("user_host"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.general_log.thread_id</code>.
     */
    public final TableField<GeneralLogRecord, ULong> THREAD_ID = createField(DSL.name("thread_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.general_log.server_id</code>.
     */
    public final TableField<GeneralLogRecord, UInteger> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.general_log.command_type</code>.
     */
    public final TableField<GeneralLogRecord, String> COMMAND_TYPE = createField(DSL.name("command_type"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.general_log.argument</code>.
     */
    public final TableField<GeneralLogRecord, byte[]> ARGUMENT = createField(DSL.name("argument"), SQLDataType.BLOB.nullable(false), this, "");

    private JGeneralLog(Name alias, Table<GeneralLogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGeneralLog(Name alias, Table<GeneralLogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("General log"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.general_log</code> table reference
     */
    public JGeneralLog(String alias) {
        this(DSL.name(alias), GENERAL_LOG);
    }

    /**
     * Create an aliased <code>mysql.general_log</code> table reference
     */
    public JGeneralLog(Name alias) {
        this(alias, GENERAL_LOG);
    }

    /**
     * Create a <code>mysql.general_log</code> table reference
     */
    public JGeneralLog() {
        this(DSL.name("general_log"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public JGeneralLog as(String alias) {
        return new JGeneralLog(DSL.name(alias), this);
    }

    @Override
    public JGeneralLog as(Name alias) {
        return new JGeneralLog(alias, this);
    }

    @Override
    public JGeneralLog as(Table<?> alias) {
        return new JGeneralLog(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGeneralLog rename(String name) {
        return new JGeneralLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGeneralLog rename(Name name) {
        return new JGeneralLog(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGeneralLog rename(Table<?> name) {
        return new JGeneralLog(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGeneralLog where(Condition condition) {
        return new JGeneralLog(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGeneralLog where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGeneralLog where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGeneralLog where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGeneralLog where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGeneralLog where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGeneralLog where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGeneralLog where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGeneralLog whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGeneralLog whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
