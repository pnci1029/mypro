/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.JSON;
import org.jooq.Record2;
import org.jooq.generated.enums.UserAccountLocked;
import org.jooq.generated.enums.UserAlterPriv;
import org.jooq.generated.enums.UserAlterRoutinePriv;
import org.jooq.generated.enums.UserCreatePriv;
import org.jooq.generated.enums.UserCreateRolePriv;
import org.jooq.generated.enums.UserCreateRoutinePriv;
import org.jooq.generated.enums.UserCreateTablespacePriv;
import org.jooq.generated.enums.UserCreateTmpTablePriv;
import org.jooq.generated.enums.UserCreateUserPriv;
import org.jooq.generated.enums.UserCreateViewPriv;
import org.jooq.generated.enums.UserDeletePriv;
import org.jooq.generated.enums.UserDropPriv;
import org.jooq.generated.enums.UserDropRolePriv;
import org.jooq.generated.enums.UserEventPriv;
import org.jooq.generated.enums.UserExecutePriv;
import org.jooq.generated.enums.UserFilePriv;
import org.jooq.generated.enums.UserGrantPriv;
import org.jooq.generated.enums.UserIndexPriv;
import org.jooq.generated.enums.UserInsertPriv;
import org.jooq.generated.enums.UserLockTablesPriv;
import org.jooq.generated.enums.UserPasswordExpired;
import org.jooq.generated.enums.UserPasswordRequireCurrent;
import org.jooq.generated.enums.UserProcessPriv;
import org.jooq.generated.enums.UserReferencesPriv;
import org.jooq.generated.enums.UserReloadPriv;
import org.jooq.generated.enums.UserReplClientPriv;
import org.jooq.generated.enums.UserReplSlavePriv;
import org.jooq.generated.enums.UserSelectPriv;
import org.jooq.generated.enums.UserShowDbPriv;
import org.jooq.generated.enums.UserShowViewPriv;
import org.jooq.generated.enums.UserShutdownPriv;
import org.jooq.generated.enums.UserSslType;
import org.jooq.generated.enums.UserSuperPriv;
import org.jooq.generated.enums.UserTriggerPriv;
import org.jooq.generated.enums.UserUpdatePriv;
import org.jooq.generated.tables.JUser;
import org.jooq.generated.tables.pojos.User;
import org.jooq.generated.tables.records.UserRecord;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * Users and global privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, User, Record2<String, String>> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(JUser.USER, User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(JUser.USER, User.class, configuration);
    }

    @Override
    public Record2<String, String> getId(User object) {
        return compositeKeyRecord(object.getHost(), object.getUser());
    }

    /**
     * Fetch records that have <code>Host BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJHost(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.HOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Host IN (values)</code>
     */
    public List<User> fetchByJHost(String... values) {
        return fetch(JUser.USER.HOST, values);
    }

    /**
     * Fetch records that have <code>User BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.USER_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>User IN (values)</code>
     */
    public List<User> fetchByJUser(String... values) {
        return fetch(JUser.USER.USER_, values);
    }

    /**
     * Fetch records that have <code>Select_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJSelectPriv(UserSelectPriv lowerInclusive, UserSelectPriv upperInclusive) {
        return fetchRange(JUser.USER.SELECT_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Select_priv IN (values)</code>
     */
    public List<User> fetchByJSelectPriv(UserSelectPriv... values) {
        return fetch(JUser.USER.SELECT_PRIV, values);
    }

    /**
     * Fetch records that have <code>Insert_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJInsertPriv(UserInsertPriv lowerInclusive, UserInsertPriv upperInclusive) {
        return fetchRange(JUser.USER.INSERT_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Insert_priv IN (values)</code>
     */
    public List<User> fetchByJInsertPriv(UserInsertPriv... values) {
        return fetch(JUser.USER.INSERT_PRIV, values);
    }

    /**
     * Fetch records that have <code>Update_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUpdatePriv(UserUpdatePriv lowerInclusive, UserUpdatePriv upperInclusive) {
        return fetchRange(JUser.USER.UPDATE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Update_priv IN (values)</code>
     */
    public List<User> fetchByJUpdatePriv(UserUpdatePriv... values) {
        return fetch(JUser.USER.UPDATE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Delete_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJDeletePriv(UserDeletePriv lowerInclusive, UserDeletePriv upperInclusive) {
        return fetchRange(JUser.USER.DELETE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Delete_priv IN (values)</code>
     */
    public List<User> fetchByJDeletePriv(UserDeletePriv... values) {
        return fetch(JUser.USER.DELETE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Create_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreatePriv(UserCreatePriv lowerInclusive, UserCreatePriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_priv IN (values)</code>
     */
    public List<User> fetchByJCreatePriv(UserCreatePriv... values) {
        return fetch(JUser.USER.CREATE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Drop_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJDropPriv(UserDropPriv lowerInclusive, UserDropPriv upperInclusive) {
        return fetchRange(JUser.USER.DROP_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Drop_priv IN (values)</code>
     */
    public List<User> fetchByJDropPriv(UserDropPriv... values) {
        return fetch(JUser.USER.DROP_PRIV, values);
    }

    /**
     * Fetch records that have <code>Reload_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJReloadPriv(UserReloadPriv lowerInclusive, UserReloadPriv upperInclusive) {
        return fetchRange(JUser.USER.RELOAD_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Reload_priv IN (values)</code>
     */
    public List<User> fetchByJReloadPriv(UserReloadPriv... values) {
        return fetch(JUser.USER.RELOAD_PRIV, values);
    }

    /**
     * Fetch records that have <code>Shutdown_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJShutdownPriv(UserShutdownPriv lowerInclusive, UserShutdownPriv upperInclusive) {
        return fetchRange(JUser.USER.SHUTDOWN_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Shutdown_priv IN (values)</code>
     */
    public List<User> fetchByJShutdownPriv(UserShutdownPriv... values) {
        return fetch(JUser.USER.SHUTDOWN_PRIV, values);
    }

    /**
     * Fetch records that have <code>Process_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJProcessPriv(UserProcessPriv lowerInclusive, UserProcessPriv upperInclusive) {
        return fetchRange(JUser.USER.PROCESS_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Process_priv IN (values)</code>
     */
    public List<User> fetchByJProcessPriv(UserProcessPriv... values) {
        return fetch(JUser.USER.PROCESS_PRIV, values);
    }

    /**
     * Fetch records that have <code>File_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJFilePriv(UserFilePriv lowerInclusive, UserFilePriv upperInclusive) {
        return fetchRange(JUser.USER.FILE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>File_priv IN (values)</code>
     */
    public List<User> fetchByJFilePriv(UserFilePriv... values) {
        return fetch(JUser.USER.FILE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Grant_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJGrantPriv(UserGrantPriv lowerInclusive, UserGrantPriv upperInclusive) {
        return fetchRange(JUser.USER.GRANT_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Grant_priv IN (values)</code>
     */
    public List<User> fetchByJGrantPriv(UserGrantPriv... values) {
        return fetch(JUser.USER.GRANT_PRIV, values);
    }

    /**
     * Fetch records that have <code>References_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJReferencesPriv(UserReferencesPriv lowerInclusive, UserReferencesPriv upperInclusive) {
        return fetchRange(JUser.USER.REFERENCES_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>References_priv IN (values)</code>
     */
    public List<User> fetchByJReferencesPriv(UserReferencesPriv... values) {
        return fetch(JUser.USER.REFERENCES_PRIV, values);
    }

    /**
     * Fetch records that have <code>Index_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJIndexPriv(UserIndexPriv lowerInclusive, UserIndexPriv upperInclusive) {
        return fetchRange(JUser.USER.INDEX_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Index_priv IN (values)</code>
     */
    public List<User> fetchByJIndexPriv(UserIndexPriv... values) {
        return fetch(JUser.USER.INDEX_PRIV, values);
    }

    /**
     * Fetch records that have <code>Alter_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJAlterPriv(UserAlterPriv lowerInclusive, UserAlterPriv upperInclusive) {
        return fetchRange(JUser.USER.ALTER_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Alter_priv IN (values)</code>
     */
    public List<User> fetchByJAlterPriv(UserAlterPriv... values) {
        return fetch(JUser.USER.ALTER_PRIV, values);
    }

    /**
     * Fetch records that have <code>Show_db_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJShowDbPriv(UserShowDbPriv lowerInclusive, UserShowDbPriv upperInclusive) {
        return fetchRange(JUser.USER.SHOW_DB_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Show_db_priv IN (values)</code>
     */
    public List<User> fetchByJShowDbPriv(UserShowDbPriv... values) {
        return fetch(JUser.USER.SHOW_DB_PRIV, values);
    }

    /**
     * Fetch records that have <code>Super_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJSuperPriv(UserSuperPriv lowerInclusive, UserSuperPriv upperInclusive) {
        return fetchRange(JUser.USER.SUPER_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Super_priv IN (values)</code>
     */
    public List<User> fetchByJSuperPriv(UserSuperPriv... values) {
        return fetch(JUser.USER.SUPER_PRIV, values);
    }

    /**
     * Fetch records that have <code>Create_tmp_table_priv BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreateTmpTablePriv(UserCreateTmpTablePriv lowerInclusive, UserCreateTmpTablePriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_TMP_TABLE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_tmp_table_priv IN (values)</code>
     */
    public List<User> fetchByJCreateTmpTablePriv(UserCreateTmpTablePriv... values) {
        return fetch(JUser.USER.CREATE_TMP_TABLE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Lock_tables_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJLockTablesPriv(UserLockTablesPriv lowerInclusive, UserLockTablesPriv upperInclusive) {
        return fetchRange(JUser.USER.LOCK_TABLES_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Lock_tables_priv IN (values)</code>
     */
    public List<User> fetchByJLockTablesPriv(UserLockTablesPriv... values) {
        return fetch(JUser.USER.LOCK_TABLES_PRIV, values);
    }

    /**
     * Fetch records that have <code>Execute_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJExecutePriv(UserExecutePriv lowerInclusive, UserExecutePriv upperInclusive) {
        return fetchRange(JUser.USER.EXECUTE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Execute_priv IN (values)</code>
     */
    public List<User> fetchByJExecutePriv(UserExecutePriv... values) {
        return fetch(JUser.USER.EXECUTE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Repl_slave_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJReplSlavePriv(UserReplSlavePriv lowerInclusive, UserReplSlavePriv upperInclusive) {
        return fetchRange(JUser.USER.REPL_SLAVE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Repl_slave_priv IN (values)</code>
     */
    public List<User> fetchByJReplSlavePriv(UserReplSlavePriv... values) {
        return fetch(JUser.USER.REPL_SLAVE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Repl_client_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJReplClientPriv(UserReplClientPriv lowerInclusive, UserReplClientPriv upperInclusive) {
        return fetchRange(JUser.USER.REPL_CLIENT_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Repl_client_priv IN (values)</code>
     */
    public List<User> fetchByJReplClientPriv(UserReplClientPriv... values) {
        return fetch(JUser.USER.REPL_CLIENT_PRIV, values);
    }

    /**
     * Fetch records that have <code>Create_view_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreateViewPriv(UserCreateViewPriv lowerInclusive, UserCreateViewPriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_VIEW_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_view_priv IN (values)</code>
     */
    public List<User> fetchByJCreateViewPriv(UserCreateViewPriv... values) {
        return fetch(JUser.USER.CREATE_VIEW_PRIV, values);
    }

    /**
     * Fetch records that have <code>Show_view_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJShowViewPriv(UserShowViewPriv lowerInclusive, UserShowViewPriv upperInclusive) {
        return fetchRange(JUser.USER.SHOW_VIEW_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Show_view_priv IN (values)</code>
     */
    public List<User> fetchByJShowViewPriv(UserShowViewPriv... values) {
        return fetch(JUser.USER.SHOW_VIEW_PRIV, values);
    }

    /**
     * Fetch records that have <code>Create_routine_priv BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreateRoutinePriv(UserCreateRoutinePriv lowerInclusive, UserCreateRoutinePriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_ROUTINE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_routine_priv IN (values)</code>
     */
    public List<User> fetchByJCreateRoutinePriv(UserCreateRoutinePriv... values) {
        return fetch(JUser.USER.CREATE_ROUTINE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Alter_routine_priv BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJAlterRoutinePriv(UserAlterRoutinePriv lowerInclusive, UserAlterRoutinePriv upperInclusive) {
        return fetchRange(JUser.USER.ALTER_ROUTINE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Alter_routine_priv IN (values)</code>
     */
    public List<User> fetchByJAlterRoutinePriv(UserAlterRoutinePriv... values) {
        return fetch(JUser.USER.ALTER_ROUTINE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Create_user_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreateUserPriv(UserCreateUserPriv lowerInclusive, UserCreateUserPriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_USER_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_user_priv IN (values)</code>
     */
    public List<User> fetchByJCreateUserPriv(UserCreateUserPriv... values) {
        return fetch(JUser.USER.CREATE_USER_PRIV, values);
    }

    /**
     * Fetch records that have <code>Event_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJEventPriv(UserEventPriv lowerInclusive, UserEventPriv upperInclusive) {
        return fetchRange(JUser.USER.EVENT_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Event_priv IN (values)</code>
     */
    public List<User> fetchByJEventPriv(UserEventPriv... values) {
        return fetch(JUser.USER.EVENT_PRIV, values);
    }

    /**
     * Fetch records that have <code>Trigger_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJTriggerPriv(UserTriggerPriv lowerInclusive, UserTriggerPriv upperInclusive) {
        return fetchRange(JUser.USER.TRIGGER_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Trigger_priv IN (values)</code>
     */
    public List<User> fetchByJTriggerPriv(UserTriggerPriv... values) {
        return fetch(JUser.USER.TRIGGER_PRIV, values);
    }

    /**
     * Fetch records that have <code>Create_tablespace_priv BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreateTablespacePriv(UserCreateTablespacePriv lowerInclusive, UserCreateTablespacePriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_TABLESPACE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_tablespace_priv IN (values)</code>
     */
    public List<User> fetchByJCreateTablespacePriv(UserCreateTablespacePriv... values) {
        return fetch(JUser.USER.CREATE_TABLESPACE_PRIV, values);
    }

    /**
     * Fetch records that have <code>ssl_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJSslType(UserSslType lowerInclusive, UserSslType upperInclusive) {
        return fetchRange(JUser.USER.SSL_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ssl_type IN (values)</code>
     */
    public List<User> fetchByJSslType(UserSslType... values) {
        return fetch(JUser.USER.SSL_TYPE, values);
    }

    /**
     * Fetch records that have <code>ssl_cipher BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJSslCipher(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(JUser.USER.SSL_CIPHER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ssl_cipher IN (values)</code>
     */
    public List<User> fetchByJSslCipher(byte[]... values) {
        return fetch(JUser.USER.SSL_CIPHER, values);
    }

    /**
     * Fetch records that have <code>x509_issuer BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJX509Issuer(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(JUser.USER.X509_ISSUER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>x509_issuer IN (values)</code>
     */
    public List<User> fetchByJX509Issuer(byte[]... values) {
        return fetch(JUser.USER.X509_ISSUER, values);
    }

    /**
     * Fetch records that have <code>x509_subject BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJX509Subject(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(JUser.USER.X509_SUBJECT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>x509_subject IN (values)</code>
     */
    public List<User> fetchByJX509Subject(byte[]... values) {
        return fetch(JUser.USER.X509_SUBJECT, values);
    }

    /**
     * Fetch records that have <code>max_questions BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJMaxQuestions(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JUser.USER.MAX_QUESTIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_questions IN (values)</code>
     */
    public List<User> fetchByJMaxQuestions(UInteger... values) {
        return fetch(JUser.USER.MAX_QUESTIONS, values);
    }

    /**
     * Fetch records that have <code>max_updates BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJMaxUpdates(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JUser.USER.MAX_UPDATES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_updates IN (values)</code>
     */
    public List<User> fetchByJMaxUpdates(UInteger... values) {
        return fetch(JUser.USER.MAX_UPDATES, values);
    }

    /**
     * Fetch records that have <code>max_connections BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJMaxConnections(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JUser.USER.MAX_CONNECTIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_connections IN (values)</code>
     */
    public List<User> fetchByJMaxConnections(UInteger... values) {
        return fetch(JUser.USER.MAX_CONNECTIONS, values);
    }

    /**
     * Fetch records that have <code>max_user_connections BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJMaxUserConnections(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JUser.USER.MAX_USER_CONNECTIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_user_connections IN (values)</code>
     */
    public List<User> fetchByJMaxUserConnections(UInteger... values) {
        return fetch(JUser.USER.MAX_USER_CONNECTIONS, values);
    }

    /**
     * Fetch records that have <code>plugin BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJPlugin(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.PLUGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>plugin IN (values)</code>
     */
    public List<User> fetchByJPlugin(String... values) {
        return fetch(JUser.USER.PLUGIN, values);
    }

    /**
     * Fetch records that have <code>authentication_string BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJAuthenticationString(String lowerInclusive, String upperInclusive) {
        return fetchRange(JUser.USER.AUTHENTICATION_STRING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>authentication_string IN (values)</code>
     */
    public List<User> fetchByJAuthenticationString(String... values) {
        return fetch(JUser.USER.AUTHENTICATION_STRING, values);
    }

    /**
     * Fetch records that have <code>password_expired BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJPasswordExpired(UserPasswordExpired lowerInclusive, UserPasswordExpired upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD_EXPIRED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password_expired IN (values)</code>
     */
    public List<User> fetchByJPasswordExpired(UserPasswordExpired... values) {
        return fetch(JUser.USER.PASSWORD_EXPIRED, values);
    }

    /**
     * Fetch records that have <code>password_last_changed BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJPasswordLastChanged(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD_LAST_CHANGED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password_last_changed IN (values)</code>
     */
    public List<User> fetchByJPasswordLastChanged(LocalDateTime... values) {
        return fetch(JUser.USER.PASSWORD_LAST_CHANGED, values);
    }

    /**
     * Fetch records that have <code>password_lifetime BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJPasswordLifetime(UShort lowerInclusive, UShort upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD_LIFETIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password_lifetime IN (values)</code>
     */
    public List<User> fetchByJPasswordLifetime(UShort... values) {
        return fetch(JUser.USER.PASSWORD_LIFETIME, values);
    }

    /**
     * Fetch records that have <code>account_locked BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJAccountLocked(UserAccountLocked lowerInclusive, UserAccountLocked upperInclusive) {
        return fetchRange(JUser.USER.ACCOUNT_LOCKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_locked IN (values)</code>
     */
    public List<User> fetchByJAccountLocked(UserAccountLocked... values) {
        return fetch(JUser.USER.ACCOUNT_LOCKED, values);
    }

    /**
     * Fetch records that have <code>Create_role_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJCreateRolePriv(UserCreateRolePriv lowerInclusive, UserCreateRolePriv upperInclusive) {
        return fetchRange(JUser.USER.CREATE_ROLE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Create_role_priv IN (values)</code>
     */
    public List<User> fetchByJCreateRolePriv(UserCreateRolePriv... values) {
        return fetch(JUser.USER.CREATE_ROLE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Drop_role_priv BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJDropRolePriv(UserDropRolePriv lowerInclusive, UserDropRolePriv upperInclusive) {
        return fetchRange(JUser.USER.DROP_ROLE_PRIV, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Drop_role_priv IN (values)</code>
     */
    public List<User> fetchByJDropRolePriv(UserDropRolePriv... values) {
        return fetch(JUser.USER.DROP_ROLE_PRIV, values);
    }

    /**
     * Fetch records that have <code>Password_reuse_history BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJPasswordReuseHistory(UShort lowerInclusive, UShort upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD_REUSE_HISTORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Password_reuse_history IN (values)</code>
     */
    public List<User> fetchByJPasswordReuseHistory(UShort... values) {
        return fetch(JUser.USER.PASSWORD_REUSE_HISTORY, values);
    }

    /**
     * Fetch records that have <code>Password_reuse_time BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJPasswordReuseTime(UShort lowerInclusive, UShort upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD_REUSE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Password_reuse_time IN (values)</code>
     */
    public List<User> fetchByJPasswordReuseTime(UShort... values) {
        return fetch(JUser.USER.PASSWORD_REUSE_TIME, values);
    }

    /**
     * Fetch records that have <code>Password_require_current BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<User> fetchRangeOfJPasswordRequireCurrent(UserPasswordRequireCurrent lowerInclusive, UserPasswordRequireCurrent upperInclusive) {
        return fetchRange(JUser.USER.PASSWORD_REQUIRE_CURRENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Password_require_current IN (values)</code>
     */
    public List<User> fetchByJPasswordRequireCurrent(UserPasswordRequireCurrent... values) {
        return fetch(JUser.USER.PASSWORD_REQUIRE_CURRENT, values);
    }

    /**
     * Fetch records that have <code>User_attributes BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<User> fetchRangeOfJUserAttributes(JSON lowerInclusive, JSON upperInclusive) {
        return fetchRange(JUser.USER.USER_ATTRIBUTES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>User_attributes IN (values)</code>
     */
    public List<User> fetchByJUserAttributes(JSON... values) {
        return fetch(JUser.USER.USER_ATTRIBUTES, values);
    }
}
