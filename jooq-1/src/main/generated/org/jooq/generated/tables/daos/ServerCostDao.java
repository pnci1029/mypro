/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JServerCost;
import org.jooq.generated.tables.pojos.ServerCost;
import org.jooq.generated.tables.records.ServerCostRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerCostDao extends DAOImpl<ServerCostRecord, ServerCost, String> {

    /**
     * Create a new ServerCostDao without any configuration
     */
    public ServerCostDao() {
        super(JServerCost.SERVER_COST, ServerCost.class);
    }

    /**
     * Create a new ServerCostDao with an attached configuration
     */
    public ServerCostDao(Configuration configuration) {
        super(JServerCost.SERVER_COST, ServerCost.class, configuration);
    }

    @Override
    public String getId(ServerCost object) {
        return object.getCostName();
    }

    /**
     * Fetch records that have <code>cost_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ServerCost> fetchRangeOfJCostName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JServerCost.SERVER_COST.COST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cost_name IN (values)</code>
     */
    public List<ServerCost> fetchByJCostName(String... values) {
        return fetch(JServerCost.SERVER_COST.COST_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>cost_name = value</code>
     */
    public ServerCost fetchOneByJCostName(String value) {
        return fetchOne(JServerCost.SERVER_COST.COST_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>cost_name = value</code>
     */
    public Optional<ServerCost> fetchOptionalByJCostName(String value) {
        return fetchOptional(JServerCost.SERVER_COST.COST_NAME, value);
    }

    /**
     * Fetch records that have <code>cost_value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ServerCost> fetchRangeOfJCostValue(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(JServerCost.SERVER_COST.COST_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cost_value IN (values)</code>
     */
    public List<ServerCost> fetchByJCostValue(Double... values) {
        return fetch(JServerCost.SERVER_COST.COST_VALUE, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ServerCost> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JServerCost.SERVER_COST.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<ServerCost> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JServerCost.SERVER_COST.LAST_UPDATE, values);
    }

    /**
     * Fetch records that have <code>comment BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ServerCost> fetchRangeOfJComment(String lowerInclusive, String upperInclusive) {
        return fetchRange(JServerCost.SERVER_COST.COMMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comment IN (values)</code>
     */
    public List<ServerCost> fetchByJComment(String... values) {
        return fetch(JServerCost.SERVER_COST.COMMENT, values);
    }

    /**
     * Fetch records that have <code>default_value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ServerCost> fetchRangeOfJDefaultValue(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(JServerCost.SERVER_COST.DEFAULT_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>default_value IN (values)</code>
     */
    public List<ServerCost> fetchByJDefaultValue(Double... values) {
        return fetch(JServerCost.SERVER_COST.DEFAULT_VALUE, values);
    }
}
