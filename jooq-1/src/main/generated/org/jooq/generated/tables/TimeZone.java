/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.enums.TimeZoneUseLeapSeconds;
import org.jooq.generated.tables.records.TimeZoneRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Time zones
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeZone extends TableImpl<TimeZoneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.time_zone</code>
     */
    public static final TimeZone TIME_ZONE = new TimeZone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimeZoneRecord> getRecordType() {
        return TimeZoneRecord.class;
    }

    /**
     * The column <code>mysql.time_zone.Time_zone_id</code>.
     */
    public final TableField<TimeZoneRecord, UInteger> TIME_ZONE_ID = createField(DSL.name("Time_zone_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>mysql.time_zone.Use_leap_seconds</code>.
     */
    public final TableField<TimeZoneRecord, TimeZoneUseLeapSeconds> USE_LEAP_SECONDS = createField(DSL.name("Use_leap_seconds"), SQLDataType.VARCHAR(1).nullable(false).defaultValue(DSL.inline("N", SQLDataType.VARCHAR)).asEnumDataType(TimeZoneUseLeapSeconds.class), this, "");

    private TimeZone(Name alias, Table<TimeZoneRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TimeZone(Name alias, Table<TimeZoneRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Time zones"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.time_zone</code> table reference
     */
    public TimeZone(String alias) {
        this(DSL.name(alias), TIME_ZONE);
    }

    /**
     * Create an aliased <code>mysql.time_zone</code> table reference
     */
    public TimeZone(Name alias) {
        this(alias, TIME_ZONE);
    }

    /**
     * Create a <code>mysql.time_zone</code> table reference
     */
    public TimeZone() {
        this(DSL.name("time_zone"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public Identity<TimeZoneRecord, UInteger> getIdentity() {
        return (Identity<TimeZoneRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<TimeZoneRecord> getPrimaryKey() {
        return Keys.KEY_TIME_ZONE_PRIMARY;
    }

    @Override
    public TimeZone as(String alias) {
        return new TimeZone(DSL.name(alias), this);
    }

    @Override
    public TimeZone as(Name alias) {
        return new TimeZone(alias, this);
    }

    @Override
    public TimeZone as(Table<?> alias) {
        return new TimeZone(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeZone rename(String name) {
        return new TimeZone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeZone rename(Name name) {
        return new TimeZone(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeZone rename(Table<?> name) {
        return new TimeZone(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZone where(Condition condition) {
        return new TimeZone(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZone where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZone where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZone where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZone where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZone where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZone where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZone where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZone whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZone whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
