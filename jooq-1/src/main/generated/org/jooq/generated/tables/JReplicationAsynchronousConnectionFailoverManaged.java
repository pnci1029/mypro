/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ReplicationAsynchronousConnectionFailoverManagedRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The managed source configuration details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JReplicationAsynchronousConnectionFailoverManaged extends TableImpl<ReplicationAsynchronousConnectionFailoverManagedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     */
    public static final JReplicationAsynchronousConnectionFailoverManaged REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED = new JReplicationAsynchronousConnectionFailoverManaged();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplicationAsynchronousConnectionFailoverManagedRecord> getRecordType() {
        return ReplicationAsynchronousConnectionFailoverManagedRecord.class;
    }

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String> CHANNEL_NAME = createField(DSL.name("Channel_name"), SQLDataType.CHAR(64).nullable(false), this, "The replication channel name that connects source and replica.");

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>.
     * The name of the source which needs to be managed.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String> MANAGED_NAME = createField(DSL.name("Managed_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "The name of the source which needs to be managed.");

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>.
     * Determines the managed type.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, String> MANAGED_TYPE = createField(DSL.name("Managed_type"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "Determines the managed type.");

    /**
     * The column
     * <code>mysql.replication_asynchronous_connection_failover_managed.Configuration</code>.
     * The data to help manage group. For Managed_type = GroupReplication,
     * Configuration value should contain {"Primary_weight": 80,
     * "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the
     * group, and weight=60 for rest of the members in
     * mysql.replication_asynchronous_connection_failover table.
     */
    public final TableField<ReplicationAsynchronousConnectionFailoverManagedRecord, JSON> CONFIGURATION = createField(DSL.name("Configuration"), SQLDataType.JSON, this, "The data to help manage group. For Managed_type = GroupReplication, Configuration value should contain {\"Primary_weight\": 80, \"Secondary_weight\": 60}, so that it assigns weight=80 to PRIMARY of the group, and weight=60 for rest of the members in mysql.replication_asynchronous_connection_failover table.");

    private JReplicationAsynchronousConnectionFailoverManaged(Name alias, Table<ReplicationAsynchronousConnectionFailoverManagedRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JReplicationAsynchronousConnectionFailoverManaged(Name alias, Table<ReplicationAsynchronousConnectionFailoverManagedRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The managed source configuration details"), TableOptions.table(), where);
    }

    /**
     * Create an aliased
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     * table reference
     */
    public JReplicationAsynchronousConnectionFailoverManaged(String alias) {
        this(DSL.name(alias), REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);
    }

    /**
     * Create an aliased
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     * table reference
     */
    public JReplicationAsynchronousConnectionFailoverManaged(Name alias) {
        this(alias, REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);
    }

    /**
     * Create a
     * <code>mysql.replication_asynchronous_connection_failover_managed</code>
     * table reference
     */
    public JReplicationAsynchronousConnectionFailoverManaged() {
        this(DSL.name("replication_asynchronous_connection_failover_managed"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord> getPrimaryKey() {
        return Keys.KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY;
    }

    @Override
    public JReplicationAsynchronousConnectionFailoverManaged as(String alias) {
        return new JReplicationAsynchronousConnectionFailoverManaged(DSL.name(alias), this);
    }

    @Override
    public JReplicationAsynchronousConnectionFailoverManaged as(Name alias) {
        return new JReplicationAsynchronousConnectionFailoverManaged(alias, this);
    }

    @Override
    public JReplicationAsynchronousConnectionFailoverManaged as(Table<?> alias) {
        return new JReplicationAsynchronousConnectionFailoverManaged(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged rename(String name) {
        return new JReplicationAsynchronousConnectionFailoverManaged(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged rename(Name name) {
        return new JReplicationAsynchronousConnectionFailoverManaged(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged rename(Table<?> name) {
        return new JReplicationAsynchronousConnectionFailoverManaged(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged where(Condition condition) {
        return new JReplicationAsynchronousConnectionFailoverManaged(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationAsynchronousConnectionFailoverManaged where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationAsynchronousConnectionFailoverManaged where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationAsynchronousConnectionFailoverManaged where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationAsynchronousConnectionFailoverManaged where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationAsynchronousConnectionFailoverManaged whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
