/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.TimeZoneLeapSecondRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Leap seconds information for time zones
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeZoneLeapSecond extends TableImpl<TimeZoneLeapSecondRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.time_zone_leap_second</code>
     */
    public static final TimeZoneLeapSecond TIME_ZONE_LEAP_SECOND = new TimeZoneLeapSecond();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimeZoneLeapSecondRecord> getRecordType() {
        return TimeZoneLeapSecondRecord.class;
    }

    /**
     * The column <code>mysql.time_zone_leap_second.Transition_time</code>.
     */
    public final TableField<TimeZoneLeapSecondRecord, Long> TRANSITION_TIME = createField(DSL.name("Transition_time"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mysql.time_zone_leap_second.Correction</code>.
     */
    public final TableField<TimeZoneLeapSecondRecord, Integer> CORRECTION = createField(DSL.name("Correction"), SQLDataType.INTEGER.nullable(false), this, "");

    private TimeZoneLeapSecond(Name alias, Table<TimeZoneLeapSecondRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TimeZoneLeapSecond(Name alias, Table<TimeZoneLeapSecondRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Leap seconds information for time zones"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.time_zone_leap_second</code> table
     * reference
     */
    public TimeZoneLeapSecond(String alias) {
        this(DSL.name(alias), TIME_ZONE_LEAP_SECOND);
    }

    /**
     * Create an aliased <code>mysql.time_zone_leap_second</code> table
     * reference
     */
    public TimeZoneLeapSecond(Name alias) {
        this(alias, TIME_ZONE_LEAP_SECOND);
    }

    /**
     * Create a <code>mysql.time_zone_leap_second</code> table reference
     */
    public TimeZoneLeapSecond() {
        this(DSL.name("time_zone_leap_second"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<TimeZoneLeapSecondRecord> getPrimaryKey() {
        return Keys.KEY_TIME_ZONE_LEAP_SECOND_PRIMARY;
    }

    @Override
    public TimeZoneLeapSecond as(String alias) {
        return new TimeZoneLeapSecond(DSL.name(alias), this);
    }

    @Override
    public TimeZoneLeapSecond as(Name alias) {
        return new TimeZoneLeapSecond(alias, this);
    }

    @Override
    public TimeZoneLeapSecond as(Table<?> alias) {
        return new TimeZoneLeapSecond(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeZoneLeapSecond rename(String name) {
        return new TimeZoneLeapSecond(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeZoneLeapSecond rename(Name name) {
        return new TimeZoneLeapSecond(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimeZoneLeapSecond rename(Table<?> name) {
        return new TimeZoneLeapSecond(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZoneLeapSecond where(Condition condition) {
        return new TimeZoneLeapSecond(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZoneLeapSecond where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZoneLeapSecond where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZoneLeapSecond where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZoneLeapSecond where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZoneLeapSecond where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZoneLeapSecond where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TimeZoneLeapSecond where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZoneLeapSecond whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TimeZoneLeapSecond whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
