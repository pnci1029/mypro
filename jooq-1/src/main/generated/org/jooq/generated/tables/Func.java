/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.enums.FuncType;
import org.jooq.generated.tables.records.FuncRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * User defined functions
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Func extends TableImpl<FuncRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.func</code>
     */
    public static final Func FUNC = new Func();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FuncRecord> getRecordType() {
        return FuncRecord.class;
    }

    /**
     * The column <code>mysql.func.name</code>.
     */
    public final TableField<FuncRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.func.ret</code>.
     */
    public final TableField<FuncRecord, Byte> RET = createField(DSL.name("ret"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>mysql.func.dl</code>.
     */
    public final TableField<FuncRecord, String> DL = createField(DSL.name("dl"), SQLDataType.CHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.func.type</code>.
     */
    public final TableField<FuncRecord, FuncType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(FuncType.class), this, "");

    private Func(Name alias, Table<FuncRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Func(Name alias, Table<FuncRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("User defined functions"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.func</code> table reference
     */
    public Func(String alias) {
        this(DSL.name(alias), FUNC);
    }

    /**
     * Create an aliased <code>mysql.func</code> table reference
     */
    public Func(Name alias) {
        this(alias, FUNC);
    }

    /**
     * Create a <code>mysql.func</code> table reference
     */
    public Func() {
        this(DSL.name("func"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<FuncRecord> getPrimaryKey() {
        return Keys.KEY_FUNC_PRIMARY;
    }

    @Override
    public Func as(String alias) {
        return new Func(DSL.name(alias), this);
    }

    @Override
    public Func as(Name alias) {
        return new Func(alias, this);
    }

    @Override
    public Func as(Table<?> alias) {
        return new Func(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Func rename(String name) {
        return new Func(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Func rename(Name name) {
        return new Func(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Func rename(Table<?> name) {
        return new Func(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Func where(Condition condition) {
        return new Func(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Func where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Func where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Func where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Func where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Func where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Func where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Func where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Func whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Func whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
