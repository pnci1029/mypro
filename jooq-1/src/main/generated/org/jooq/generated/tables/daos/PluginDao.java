/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JPlugin;
import org.jooq.generated.tables.pojos.Plugin;
import org.jooq.generated.tables.records.PluginRecord;
import org.jooq.impl.DAOImpl;


/**
 * MySQL plugins
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PluginDao extends DAOImpl<PluginRecord, Plugin, String> {

    /**
     * Create a new PluginDao without any configuration
     */
    public PluginDao() {
        super(JPlugin.PLUGIN, Plugin.class);
    }

    /**
     * Create a new PluginDao with an attached configuration
     */
    public PluginDao(Configuration configuration) {
        super(JPlugin.PLUGIN, Plugin.class, configuration);
    }

    @Override
    public String getId(Plugin object) {
        return object.getName();
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Plugin> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JPlugin.PLUGIN.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<Plugin> fetchByJName(String... values) {
        return fetch(JPlugin.PLUGIN.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Plugin fetchOneByJName(String value) {
        return fetchOne(JPlugin.PLUGIN.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<Plugin> fetchOptionalByJName(String value) {
        return fetchOptional(JPlugin.PLUGIN.NAME, value);
    }

    /**
     * Fetch records that have <code>dl BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Plugin> fetchRangeOfJDl(String lowerInclusive, String upperInclusive) {
        return fetchRange(JPlugin.PLUGIN.DL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dl IN (values)</code>
     */
    public List<Plugin> fetchByJDl(String... values) {
        return fetch(JPlugin.PLUGIN.DL, values);
    }
}
