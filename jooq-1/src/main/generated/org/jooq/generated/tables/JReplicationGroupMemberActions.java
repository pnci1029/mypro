/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ReplicationGroupMemberActionsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * The member actions configuration.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JReplicationGroupMemberActions extends TableImpl<ReplicationGroupMemberActionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>mysql.replication_group_member_actions</code>
     */
    public static final JReplicationGroupMemberActions REPLICATION_GROUP_MEMBER_ACTIONS = new JReplicationGroupMemberActions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReplicationGroupMemberActionsRecord> getRecordType() {
        return ReplicationGroupMemberActionsRecord.class;
    }

    /**
     * The column <code>mysql.replication_group_member_actions.name</code>. The
     * action name.
     */
    public final TableField<ReplicationGroupMemberActionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(255).nullable(false), this, "The action name.");

    /**
     * The column <code>mysql.replication_group_member_actions.event</code>. The
     * event that will trigger the action.
     */
    public final TableField<ReplicationGroupMemberActionsRecord, String> EVENT = createField(DSL.name("event"), SQLDataType.CHAR(64).nullable(false), this, "The event that will trigger the action.");

    /**
     * The column <code>mysql.replication_group_member_actions.enabled</code>.
     * Whether the action is enabled.
     */
    public final TableField<ReplicationGroupMemberActionsRecord, Byte> ENABLED = createField(DSL.name("enabled"), SQLDataType.TINYINT.nullable(false), this, "Whether the action is enabled.");

    /**
     * The column <code>mysql.replication_group_member_actions.type</code>. The
     * action type.
     */
    public final TableField<ReplicationGroupMemberActionsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(64).nullable(false), this, "The action type.");

    /**
     * The column <code>mysql.replication_group_member_actions.priority</code>.
     * The order on which the action will be run, value between 1 and 100, lower
     * values first.
     */
    public final TableField<ReplicationGroupMemberActionsRecord, UByte> PRIORITY = createField(DSL.name("priority"), SQLDataType.TINYINTUNSIGNED.nullable(false), this, "The order on which the action will be run, value between 1 and 100, lower values first.");

    /**
     * The column
     * <code>mysql.replication_group_member_actions.error_handling</code>. On
     * errors during the action will be handled: IGNORE, CRITICAL.
     */
    public final TableField<ReplicationGroupMemberActionsRecord, String> ERROR_HANDLING = createField(DSL.name("error_handling"), SQLDataType.CHAR(64).nullable(false), this, "On errors during the action will be handled: IGNORE, CRITICAL.");

    private JReplicationGroupMemberActions(Name alias, Table<ReplicationGroupMemberActionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JReplicationGroupMemberActions(Name alias, Table<ReplicationGroupMemberActionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The member actions configuration."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.replication_group_member_actions</code>
     * table reference
     */
    public JReplicationGroupMemberActions(String alias) {
        this(DSL.name(alias), REPLICATION_GROUP_MEMBER_ACTIONS);
    }

    /**
     * Create an aliased <code>mysql.replication_group_member_actions</code>
     * table reference
     */
    public JReplicationGroupMemberActions(Name alias) {
        this(alias, REPLICATION_GROUP_MEMBER_ACTIONS);
    }

    /**
     * Create a <code>mysql.replication_group_member_actions</code> table
     * reference
     */
    public JReplicationGroupMemberActions() {
        this(DSL.name("replication_group_member_actions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REPLICATION_GROUP_MEMBER_ACTIONS_EVENT);
    }

    @Override
    public UniqueKey<ReplicationGroupMemberActionsRecord> getPrimaryKey() {
        return Keys.KEY_REPLICATION_GROUP_MEMBER_ACTIONS_PRIMARY;
    }

    @Override
    public JReplicationGroupMemberActions as(String alias) {
        return new JReplicationGroupMemberActions(DSL.name(alias), this);
    }

    @Override
    public JReplicationGroupMemberActions as(Name alias) {
        return new JReplicationGroupMemberActions(alias, this);
    }

    @Override
    public JReplicationGroupMemberActions as(Table<?> alias) {
        return new JReplicationGroupMemberActions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JReplicationGroupMemberActions rename(String name) {
        return new JReplicationGroupMemberActions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JReplicationGroupMemberActions rename(Name name) {
        return new JReplicationGroupMemberActions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JReplicationGroupMemberActions rename(Table<?> name) {
        return new JReplicationGroupMemberActions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationGroupMemberActions where(Condition condition) {
        return new JReplicationGroupMemberActions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationGroupMemberActions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationGroupMemberActions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationGroupMemberActions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationGroupMemberActions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationGroupMemberActions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationGroupMemberActions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JReplicationGroupMemberActions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationGroupMemberActions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JReplicationGroupMemberActions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
