/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * Password history for user accounts
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordHistory implements Serializable {

    private static final long serialVersionUID = 1L;

    private String host;
    private String user;
    private LocalDateTime passwordTimestamp;
    private String password;

    public PasswordHistory() {}

    public PasswordHistory(PasswordHistory value) {
        this.host = value.host;
        this.user = value.user;
        this.passwordTimestamp = value.passwordTimestamp;
        this.password = value.password;
    }

    public PasswordHistory(
        String host,
        String user,
        LocalDateTime passwordTimestamp,
        String password
    ) {
        this.host = host;
        this.user = user;
        this.passwordTimestamp = passwordTimestamp;
        this.password = password;
    }

    /**
     * Getter for <code>mysql.password_history.Host</code>.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Setter for <code>mysql.password_history.Host</code>.
     */
    public PasswordHistory setHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.User</code>.
     */
    public String getUser() {
        return this.user;
    }

    /**
     * Setter for <code>mysql.password_history.User</code>.
     */
    public PasswordHistory setUser(String user) {
        this.user = user;
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.Password_timestamp</code>.
     */
    public LocalDateTime getPasswordTimestamp() {
        return this.passwordTimestamp;
    }

    /**
     * Setter for <code>mysql.password_history.Password_timestamp</code>.
     */
    public PasswordHistory setPasswordTimestamp(LocalDateTime passwordTimestamp) {
        this.passwordTimestamp = passwordTimestamp;
        return this;
    }

    /**
     * Getter for <code>mysql.password_history.Password</code>.
     */
    public String getPassword() {
        return this.password;
    }

    /**
     * Setter for <code>mysql.password_history.Password</code>.
     */
    public PasswordHistory setPassword(String password) {
        this.password = password;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PasswordHistory other = (PasswordHistory) obj;
        if (this.host == null) {
            if (other.host != null)
                return false;
        }
        else if (!this.host.equals(other.host))
            return false;
        if (this.user == null) {
            if (other.user != null)
                return false;
        }
        else if (!this.user.equals(other.user))
            return false;
        if (this.passwordTimestamp == null) {
            if (other.passwordTimestamp != null)
                return false;
        }
        else if (!this.passwordTimestamp.equals(other.passwordTimestamp))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.host == null) ? 0 : this.host.hashCode());
        result = prime * result + ((this.user == null) ? 0 : this.user.hashCode());
        result = prime * result + ((this.passwordTimestamp == null) ? 0 : this.passwordTimestamp.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PasswordHistory (");

        sb.append(host);
        sb.append(", ").append(user);
        sb.append(", ").append(passwordTimestamp);
        sb.append(", ").append(password);

        sb.append(")");
        return sb.toString();
    }
}
