/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.ColumnsPrivRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Column privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JColumnsPriv extends TableImpl<ColumnsPrivRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.columns_priv</code>
     */
    public static final JColumnsPriv COLUMNS_PRIV = new JColumnsPriv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnsPrivRecord> getRecordType() {
        return ColumnsPrivRecord.class;
    }

    /**
     * The column <code>mysql.columns_priv.Host</code>.
     */
    public final TableField<ColumnsPrivRecord, String> HOST = createField(DSL.name("Host"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Db</code>.
     */
    public final TableField<ColumnsPrivRecord, String> DB = createField(DSL.name("Db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.User</code>.
     */
    public final TableField<ColumnsPrivRecord, String> USER = createField(DSL.name("User"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Table_name</code>.
     */
    public final TableField<ColumnsPrivRecord, String> TABLE_NAME = createField(DSL.name("Table_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Column_name</code>.
     */
    public final TableField<ColumnsPrivRecord, String> COLUMN_NAME = createField(DSL.name("Column_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.columns_priv.Timestamp</code>.
     */
    public final TableField<ColumnsPrivRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("Timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.columns_priv.Column_priv</code>.
     */
    public final TableField<ColumnsPrivRecord, String> COLUMN_PRIV = createField(DSL.name("Column_priv"), SQLDataType.VARCHAR(31).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    private JColumnsPriv(Name alias, Table<ColumnsPrivRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JColumnsPriv(Name alias, Table<ColumnsPrivRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Column privileges"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.columns_priv</code> table reference
     */
    public JColumnsPriv(String alias) {
        this(DSL.name(alias), COLUMNS_PRIV);
    }

    /**
     * Create an aliased <code>mysql.columns_priv</code> table reference
     */
    public JColumnsPriv(Name alias) {
        this(alias, COLUMNS_PRIV);
    }

    /**
     * Create a <code>mysql.columns_priv</code> table reference
     */
    public JColumnsPriv() {
        this(DSL.name("columns_priv"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<ColumnsPrivRecord> getPrimaryKey() {
        return Keys.KEY_COLUMNS_PRIV_PRIMARY;
    }

    @Override
    public JColumnsPriv as(String alias) {
        return new JColumnsPriv(DSL.name(alias), this);
    }

    @Override
    public JColumnsPriv as(Name alias) {
        return new JColumnsPriv(alias, this);
    }

    @Override
    public JColumnsPriv as(Table<?> alias) {
        return new JColumnsPriv(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JColumnsPriv rename(String name) {
        return new JColumnsPriv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JColumnsPriv rename(Name name) {
        return new JColumnsPriv(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JColumnsPriv rename(Table<?> name) {
        return new JColumnsPriv(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JColumnsPriv where(Condition condition) {
        return new JColumnsPriv(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JColumnsPriv where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JColumnsPriv where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JColumnsPriv where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JColumnsPriv where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JColumnsPriv where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JColumnsPriv where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JColumnsPriv where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JColumnsPriv whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JColumnsPriv whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
