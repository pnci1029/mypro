/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.generated.tables.JInnodbTableStats;
import org.jooq.generated.tables.pojos.InnodbTableStats;
import org.jooq.generated.tables.records.InnodbTableStatsRecord;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTableStatsDao extends DAOImpl<InnodbTableStatsRecord, InnodbTableStats, Record2<String, String>> {

    /**
     * Create a new InnodbTableStatsDao without any configuration
     */
    public InnodbTableStatsDao() {
        super(JInnodbTableStats.INNODB_TABLE_STATS, InnodbTableStats.class);
    }

    /**
     * Create a new InnodbTableStatsDao with an attached configuration
     */
    public InnodbTableStatsDao(Configuration configuration) {
        super(JInnodbTableStats.INNODB_TABLE_STATS, InnodbTableStats.class, configuration);
    }

    @Override
    public Record2<String, String> getId(InnodbTableStats object) {
        return compositeKeyRecord(object.getDatabaseName(), object.getTableName());
    }

    /**
     * Fetch records that have <code>database_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbTableStats> fetchRangeOfJDatabaseName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbTableStats.INNODB_TABLE_STATS.DATABASE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>database_name IN (values)</code>
     */
    public List<InnodbTableStats> fetchByJDatabaseName(String... values) {
        return fetch(JInnodbTableStats.INNODB_TABLE_STATS.DATABASE_NAME, values);
    }

    /**
     * Fetch records that have <code>table_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbTableStats> fetchRangeOfJTableName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbTableStats.INNODB_TABLE_STATS.TABLE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>table_name IN (values)</code>
     */
    public List<InnodbTableStats> fetchByJTableName(String... values) {
        return fetch(JInnodbTableStats.INNODB_TABLE_STATS.TABLE_NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbTableStats> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JInnodbTableStats.INNODB_TABLE_STATS.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<InnodbTableStats> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JInnodbTableStats.INNODB_TABLE_STATS.LAST_UPDATE, values);
    }

    /**
     * Fetch records that have <code>n_rows BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbTableStats> fetchRangeOfJNRows(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JInnodbTableStats.INNODB_TABLE_STATS.N_ROWS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>n_rows IN (values)</code>
     */
    public List<InnodbTableStats> fetchByJNRows(ULong... values) {
        return fetch(JInnodbTableStats.INNODB_TABLE_STATS.N_ROWS, values);
    }

    /**
     * Fetch records that have <code>clustered_index_size BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<InnodbTableStats> fetchRangeOfJClusteredIndexSize(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JInnodbTableStats.INNODB_TABLE_STATS.CLUSTERED_INDEX_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>clustered_index_size IN (values)</code>
     */
    public List<InnodbTableStats> fetchByJClusteredIndexSize(ULong... values) {
        return fetch(JInnodbTableStats.INNODB_TABLE_STATS.CLUSTERED_INDEX_SIZE, values);
    }

    /**
     * Fetch records that have <code>sum_of_other_index_sizes BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<InnodbTableStats> fetchRangeOfJSumOfOtherIndexSizes(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JInnodbTableStats.INNODB_TABLE_STATS.SUM_OF_OTHER_INDEX_SIZES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum_of_other_index_sizes IN (values)</code>
     */
    public List<InnodbTableStats> fetchByJSumOfOtherIndexSizes(ULong... values) {
        return fetch(JInnodbTableStats.INNODB_TABLE_STATS.SUM_OF_OTHER_INDEX_SIZES, values);
    }
}
