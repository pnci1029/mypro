/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.NdbBinlogIndexRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JNdbBinlogIndex extends TableImpl<NdbBinlogIndexRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.ndb_binlog_index</code>
     */
    public static final JNdbBinlogIndex NDB_BINLOG_INDEX = new JNdbBinlogIndex();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NdbBinlogIndexRecord> getRecordType() {
        return NdbBinlogIndexRecord.class;
    }

    /**
     * The column <code>mysql.ndb_binlog_index.Position</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> POSITION = createField(DSL.name("Position"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.File</code>.
     */
    public final TableField<NdbBinlogIndexRecord, String> FILE = createField(DSL.name("File"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.epoch</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> EPOCH = createField(DSL.name("epoch"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.inserts</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> INSERTS = createField(DSL.name("inserts"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.updates</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> UPDATES = createField(DSL.name("updates"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.deletes</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> DELETES = createField(DSL.name("deletes"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> SCHEMAOPS = createField(DSL.name("schemaops"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> ORIG_SERVER_ID = createField(DSL.name("orig_server_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> ORIG_EPOCH = createField(DSL.name("orig_epoch"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.gci</code>.
     */
    public final TableField<NdbBinlogIndexRecord, UInteger> GCI = createField(DSL.name("gci"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.next_position</code>.
     */
    public final TableField<NdbBinlogIndexRecord, ULong> NEXT_POSITION = createField(DSL.name("next_position"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.ndb_binlog_index.next_file</code>.
     */
    public final TableField<NdbBinlogIndexRecord, String> NEXT_FILE = createField(DSL.name("next_file"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private JNdbBinlogIndex(Name alias, Table<NdbBinlogIndexRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JNdbBinlogIndex(Name alias, Table<NdbBinlogIndexRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
     */
    public JNdbBinlogIndex(String alias) {
        this(DSL.name(alias), NDB_BINLOG_INDEX);
    }

    /**
     * Create an aliased <code>mysql.ndb_binlog_index</code> table reference
     */
    public JNdbBinlogIndex(Name alias) {
        this(alias, NDB_BINLOG_INDEX);
    }

    /**
     * Create a <code>mysql.ndb_binlog_index</code> table reference
     */
    public JNdbBinlogIndex() {
        this(DSL.name("ndb_binlog_index"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<NdbBinlogIndexRecord> getPrimaryKey() {
        return Keys.KEY_NDB_BINLOG_INDEX_PRIMARY;
    }

    @Override
    public JNdbBinlogIndex as(String alias) {
        return new JNdbBinlogIndex(DSL.name(alias), this);
    }

    @Override
    public JNdbBinlogIndex as(Name alias) {
        return new JNdbBinlogIndex(alias, this);
    }

    @Override
    public JNdbBinlogIndex as(Table<?> alias) {
        return new JNdbBinlogIndex(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JNdbBinlogIndex rename(String name) {
        return new JNdbBinlogIndex(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JNdbBinlogIndex rename(Name name) {
        return new JNdbBinlogIndex(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JNdbBinlogIndex rename(Table<?> name) {
        return new JNdbBinlogIndex(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JNdbBinlogIndex where(Condition condition) {
        return new JNdbBinlogIndex(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JNdbBinlogIndex where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JNdbBinlogIndex where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JNdbBinlogIndex where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JNdbBinlogIndex where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JNdbBinlogIndex where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JNdbBinlogIndex where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JNdbBinlogIndex where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JNdbBinlogIndex whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JNdbBinlogIndex whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
