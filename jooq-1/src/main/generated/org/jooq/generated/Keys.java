/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.tables.ColumnsPriv;
import org.jooq.generated.tables.Component;
import org.jooq.generated.tables.Db;
import org.jooq.generated.tables.DefaultRoles;
import org.jooq.generated.tables.EngineCost;
import org.jooq.generated.tables.Func;
import org.jooq.generated.tables.GlobalGrants;
import org.jooq.generated.tables.GtidExecuted;
import org.jooq.generated.tables.HelpCategory;
import org.jooq.generated.tables.HelpKeyword;
import org.jooq.generated.tables.HelpRelation;
import org.jooq.generated.tables.HelpTopic;
import org.jooq.generated.tables.InnodbIndexStats;
import org.jooq.generated.tables.InnodbTableStats;
import org.jooq.generated.tables.NdbBinlogIndex;
import org.jooq.generated.tables.PasswordHistory;
import org.jooq.generated.tables.Plugin;
import org.jooq.generated.tables.ProcsPriv;
import org.jooq.generated.tables.ProxiesPriv;
import org.jooq.generated.tables.ReplicationAsynchronousConnectionFailover;
import org.jooq.generated.tables.ReplicationAsynchronousConnectionFailoverManaged;
import org.jooq.generated.tables.ReplicationGroupConfigurationVersion;
import org.jooq.generated.tables.ReplicationGroupMemberActions;
import org.jooq.generated.tables.RoleEdges;
import org.jooq.generated.tables.ServerCost;
import org.jooq.generated.tables.Servers;
import org.jooq.generated.tables.SlaveMasterInfo;
import org.jooq.generated.tables.SlaveRelayLogInfo;
import org.jooq.generated.tables.SlaveWorkerInfo;
import org.jooq.generated.tables.TablesPriv;
import org.jooq.generated.tables.TimeZone;
import org.jooq.generated.tables.TimeZoneLeapSecond;
import org.jooq.generated.tables.TimeZoneName;
import org.jooq.generated.tables.TimeZoneTransition;
import org.jooq.generated.tables.TimeZoneTransitionType;
import org.jooq.generated.tables.User;
import org.jooq.generated.tables.records.ColumnsPrivRecord;
import org.jooq.generated.tables.records.ComponentRecord;
import org.jooq.generated.tables.records.DbRecord;
import org.jooq.generated.tables.records.DefaultRolesRecord;
import org.jooq.generated.tables.records.EngineCostRecord;
import org.jooq.generated.tables.records.FuncRecord;
import org.jooq.generated.tables.records.GlobalGrantsRecord;
import org.jooq.generated.tables.records.GtidExecutedRecord;
import org.jooq.generated.tables.records.HelpCategoryRecord;
import org.jooq.generated.tables.records.HelpKeywordRecord;
import org.jooq.generated.tables.records.HelpRelationRecord;
import org.jooq.generated.tables.records.HelpTopicRecord;
import org.jooq.generated.tables.records.InnodbIndexStatsRecord;
import org.jooq.generated.tables.records.InnodbTableStatsRecord;
import org.jooq.generated.tables.records.NdbBinlogIndexRecord;
import org.jooq.generated.tables.records.PasswordHistoryRecord;
import org.jooq.generated.tables.records.PluginRecord;
import org.jooq.generated.tables.records.ProcsPrivRecord;
import org.jooq.generated.tables.records.ProxiesPrivRecord;
import org.jooq.generated.tables.records.ReplicationAsynchronousConnectionFailoverManagedRecord;
import org.jooq.generated.tables.records.ReplicationAsynchronousConnectionFailoverRecord;
import org.jooq.generated.tables.records.ReplicationGroupConfigurationVersionRecord;
import org.jooq.generated.tables.records.ReplicationGroupMemberActionsRecord;
import org.jooq.generated.tables.records.RoleEdgesRecord;
import org.jooq.generated.tables.records.ServerCostRecord;
import org.jooq.generated.tables.records.ServersRecord;
import org.jooq.generated.tables.records.SlaveMasterInfoRecord;
import org.jooq.generated.tables.records.SlaveRelayLogInfoRecord;
import org.jooq.generated.tables.records.SlaveWorkerInfoRecord;
import org.jooq.generated.tables.records.TablesPrivRecord;
import org.jooq.generated.tables.records.TimeZoneLeapSecondRecord;
import org.jooq.generated.tables.records.TimeZoneNameRecord;
import org.jooq.generated.tables.records.TimeZoneRecord;
import org.jooq.generated.tables.records.TimeZoneTransitionRecord;
import org.jooq.generated.tables.records.TimeZoneTransitionTypeRecord;
import org.jooq.generated.tables.records.UserRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * mysql.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ColumnsPrivRecord> KEY_COLUMNS_PRIV_PRIMARY = Internal.createUniqueKey(ColumnsPriv.COLUMNS_PRIV, DSL.name("KEY_columns_priv_PRIMARY"), new TableField[] { ColumnsPriv.COLUMNS_PRIV.HOST, ColumnsPriv.COLUMNS_PRIV.USER, ColumnsPriv.COLUMNS_PRIV.DB, ColumnsPriv.COLUMNS_PRIV.TABLE_NAME, ColumnsPriv.COLUMNS_PRIV.COLUMN_NAME }, true);
    public static final UniqueKey<ComponentRecord> KEY_COMPONENT_PRIMARY = Internal.createUniqueKey(Component.COMPONENT, DSL.name("KEY_component_PRIMARY"), new TableField[] { Component.COMPONENT.COMPONENT_ID }, true);
    public static final UniqueKey<DbRecord> KEY_DB_PRIMARY = Internal.createUniqueKey(Db.DB, DSL.name("KEY_db_PRIMARY"), new TableField[] { Db.DB.HOST, Db.DB.USER, Db.DB.DB_ }, true);
    public static final UniqueKey<DefaultRolesRecord> KEY_DEFAULT_ROLES_PRIMARY = Internal.createUniqueKey(DefaultRoles.DEFAULT_ROLES, DSL.name("KEY_default_roles_PRIMARY"), new TableField[] { DefaultRoles.DEFAULT_ROLES.HOST, DefaultRoles.DEFAULT_ROLES.USER, DefaultRoles.DEFAULT_ROLES.DEFAULT_ROLE_HOST, DefaultRoles.DEFAULT_ROLES.DEFAULT_ROLE_USER }, true);
    public static final UniqueKey<EngineCostRecord> KEY_ENGINE_COST_PRIMARY = Internal.createUniqueKey(EngineCost.ENGINE_COST, DSL.name("KEY_engine_cost_PRIMARY"), new TableField[] { EngineCost.ENGINE_COST.COST_NAME, EngineCost.ENGINE_COST.ENGINE_NAME, EngineCost.ENGINE_COST.DEVICE_TYPE }, true);
    public static final UniqueKey<FuncRecord> KEY_FUNC_PRIMARY = Internal.createUniqueKey(Func.FUNC, DSL.name("KEY_func_PRIMARY"), new TableField[] { Func.FUNC.NAME }, true);
    public static final UniqueKey<GlobalGrantsRecord> KEY_GLOBAL_GRANTS_PRIMARY = Internal.createUniqueKey(GlobalGrants.GLOBAL_GRANTS, DSL.name("KEY_global_grants_PRIMARY"), new TableField[] { GlobalGrants.GLOBAL_GRANTS.USER, GlobalGrants.GLOBAL_GRANTS.HOST, GlobalGrants.GLOBAL_GRANTS.PRIV }, true);
    public static final UniqueKey<GtidExecutedRecord> KEY_GTID_EXECUTED_PRIMARY = Internal.createUniqueKey(GtidExecuted.GTID_EXECUTED, DSL.name("KEY_gtid_executed_PRIMARY"), new TableField[] { GtidExecuted.GTID_EXECUTED.SOURCE_UUID, GtidExecuted.GTID_EXECUTED.INTERVAL_START }, true);
    public static final UniqueKey<HelpCategoryRecord> KEY_HELP_CATEGORY_NAME = Internal.createUniqueKey(HelpCategory.HELP_CATEGORY, DSL.name("KEY_help_category_name"), new TableField[] { HelpCategory.HELP_CATEGORY.NAME }, true);
    public static final UniqueKey<HelpCategoryRecord> KEY_HELP_CATEGORY_PRIMARY = Internal.createUniqueKey(HelpCategory.HELP_CATEGORY, DSL.name("KEY_help_category_PRIMARY"), new TableField[] { HelpCategory.HELP_CATEGORY.HELP_CATEGORY_ID }, true);
    public static final UniqueKey<HelpKeywordRecord> KEY_HELP_KEYWORD_NAME = Internal.createUniqueKey(HelpKeyword.HELP_KEYWORD, DSL.name("KEY_help_keyword_name"), new TableField[] { HelpKeyword.HELP_KEYWORD.NAME }, true);
    public static final UniqueKey<HelpKeywordRecord> KEY_HELP_KEYWORD_PRIMARY = Internal.createUniqueKey(HelpKeyword.HELP_KEYWORD, DSL.name("KEY_help_keyword_PRIMARY"), new TableField[] { HelpKeyword.HELP_KEYWORD.HELP_KEYWORD_ID }, true);
    public static final UniqueKey<HelpRelationRecord> KEY_HELP_RELATION_PRIMARY = Internal.createUniqueKey(HelpRelation.HELP_RELATION, DSL.name("KEY_help_relation_PRIMARY"), new TableField[] { HelpRelation.HELP_RELATION.HELP_KEYWORD_ID, HelpRelation.HELP_RELATION.HELP_TOPIC_ID }, true);
    public static final UniqueKey<HelpTopicRecord> KEY_HELP_TOPIC_NAME = Internal.createUniqueKey(HelpTopic.HELP_TOPIC, DSL.name("KEY_help_topic_name"), new TableField[] { HelpTopic.HELP_TOPIC.NAME }, true);
    public static final UniqueKey<HelpTopicRecord> KEY_HELP_TOPIC_PRIMARY = Internal.createUniqueKey(HelpTopic.HELP_TOPIC, DSL.name("KEY_help_topic_PRIMARY"), new TableField[] { HelpTopic.HELP_TOPIC.HELP_TOPIC_ID }, true);
    public static final UniqueKey<InnodbIndexStatsRecord> KEY_INNODB_INDEX_STATS_PRIMARY = Internal.createUniqueKey(InnodbIndexStats.INNODB_INDEX_STATS, DSL.name("KEY_innodb_index_stats_PRIMARY"), new TableField[] { InnodbIndexStats.INNODB_INDEX_STATS.DATABASE_NAME, InnodbIndexStats.INNODB_INDEX_STATS.TABLE_NAME, InnodbIndexStats.INNODB_INDEX_STATS.INDEX_NAME, InnodbIndexStats.INNODB_INDEX_STATS.STAT_NAME }, true);
    public static final UniqueKey<InnodbTableStatsRecord> KEY_INNODB_TABLE_STATS_PRIMARY = Internal.createUniqueKey(InnodbTableStats.INNODB_TABLE_STATS, DSL.name("KEY_innodb_table_stats_PRIMARY"), new TableField[] { InnodbTableStats.INNODB_TABLE_STATS.DATABASE_NAME, InnodbTableStats.INNODB_TABLE_STATS.TABLE_NAME }, true);
    public static final UniqueKey<NdbBinlogIndexRecord> KEY_NDB_BINLOG_INDEX_PRIMARY = Internal.createUniqueKey(NdbBinlogIndex.NDB_BINLOG_INDEX, DSL.name("KEY_ndb_binlog_index_PRIMARY"), new TableField[] { NdbBinlogIndex.NDB_BINLOG_INDEX.EPOCH, NdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_SERVER_ID, NdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_EPOCH }, true);
    public static final UniqueKey<PasswordHistoryRecord> KEY_PASSWORD_HISTORY_PRIMARY = Internal.createUniqueKey(PasswordHistory.PASSWORD_HISTORY, DSL.name("KEY_password_history_PRIMARY"), new TableField[] { PasswordHistory.PASSWORD_HISTORY.HOST, PasswordHistory.PASSWORD_HISTORY.USER, PasswordHistory.PASSWORD_HISTORY.PASSWORD_TIMESTAMP }, true);
    public static final UniqueKey<PluginRecord> KEY_PLUGIN_PRIMARY = Internal.createUniqueKey(Plugin.PLUGIN, DSL.name("KEY_plugin_PRIMARY"), new TableField[] { Plugin.PLUGIN.NAME }, true);
    public static final UniqueKey<ProcsPrivRecord> KEY_PROCS_PRIV_PRIMARY = Internal.createUniqueKey(ProcsPriv.PROCS_PRIV, DSL.name("KEY_procs_priv_PRIMARY"), new TableField[] { ProcsPriv.PROCS_PRIV.HOST, ProcsPriv.PROCS_PRIV.USER, ProcsPriv.PROCS_PRIV.DB, ProcsPriv.PROCS_PRIV.ROUTINE_NAME, ProcsPriv.PROCS_PRIV.ROUTINE_TYPE }, true);
    public static final UniqueKey<ProxiesPrivRecord> KEY_PROXIES_PRIV_PRIMARY = Internal.createUniqueKey(ProxiesPriv.PROXIES_PRIV, DSL.name("KEY_proxies_priv_PRIMARY"), new TableField[] { ProxiesPriv.PROXIES_PRIV.HOST, ProxiesPriv.PROXIES_PRIV.USER, ProxiesPriv.PROXIES_PRIV.PROXIED_HOST, ProxiesPriv.PROXIES_PRIV.PROXIED_USER }, true);
    public static final UniqueKey<ReplicationAsynchronousConnectionFailoverRecord> KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_PRIMARY = Internal.createUniqueKey(ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER, DSL.name("KEY_replication_asynchronous_connection_failover_PRIMARY"), new TableField[] { ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.CHANNEL_NAME, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.HOST, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.PORT, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.NETWORK_NAMESPACE, ReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER.MANAGED_NAME }, true);
    public static final UniqueKey<ReplicationAsynchronousConnectionFailoverManagedRecord> KEY_REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED_PRIMARY = Internal.createUniqueKey(ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED, DSL.name("KEY_replication_asynchronous_connection_failover_managed_PRIMARY"), new TableField[] { ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED.CHANNEL_NAME, ReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED.MANAGED_NAME }, true);
    public static final UniqueKey<ReplicationGroupConfigurationVersionRecord> KEY_REPLICATION_GROUP_CONFIGURATION_VERSION_PRIMARY = Internal.createUniqueKey(ReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION, DSL.name("KEY_replication_group_configuration_version_PRIMARY"), new TableField[] { ReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.NAME }, true);
    public static final UniqueKey<ReplicationGroupMemberActionsRecord> KEY_REPLICATION_GROUP_MEMBER_ACTIONS_PRIMARY = Internal.createUniqueKey(ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS, DSL.name("KEY_replication_group_member_actions_PRIMARY"), new TableField[] { ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS.NAME, ReplicationGroupMemberActions.REPLICATION_GROUP_MEMBER_ACTIONS.EVENT }, true);
    public static final UniqueKey<RoleEdgesRecord> KEY_ROLE_EDGES_PRIMARY = Internal.createUniqueKey(RoleEdges.ROLE_EDGES, DSL.name("KEY_role_edges_PRIMARY"), new TableField[] { RoleEdges.ROLE_EDGES.FROM_HOST, RoleEdges.ROLE_EDGES.FROM_USER, RoleEdges.ROLE_EDGES.TO_HOST, RoleEdges.ROLE_EDGES.TO_USER }, true);
    public static final UniqueKey<ServerCostRecord> KEY_SERVER_COST_PRIMARY = Internal.createUniqueKey(ServerCost.SERVER_COST, DSL.name("KEY_server_cost_PRIMARY"), new TableField[] { ServerCost.SERVER_COST.COST_NAME }, true);
    public static final UniqueKey<ServersRecord> KEY_SERVERS_PRIMARY = Internal.createUniqueKey(Servers.SERVERS, DSL.name("KEY_servers_PRIMARY"), new TableField[] { Servers.SERVERS.SERVER_NAME }, true);
    public static final UniqueKey<SlaveMasterInfoRecord> KEY_SLAVE_MASTER_INFO_PRIMARY = Internal.createUniqueKey(SlaveMasterInfo.SLAVE_MASTER_INFO, DSL.name("KEY_slave_master_info_PRIMARY"), new TableField[] { SlaveMasterInfo.SLAVE_MASTER_INFO.CHANNEL_NAME }, true);
    public static final UniqueKey<SlaveRelayLogInfoRecord> KEY_SLAVE_RELAY_LOG_INFO_PRIMARY = Internal.createUniqueKey(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO, DSL.name("KEY_slave_relay_log_info_PRIMARY"), new TableField[] { SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO.CHANNEL_NAME }, true);
    public static final UniqueKey<SlaveWorkerInfoRecord> KEY_SLAVE_WORKER_INFO_PRIMARY = Internal.createUniqueKey(SlaveWorkerInfo.SLAVE_WORKER_INFO, DSL.name("KEY_slave_worker_info_PRIMARY"), new TableField[] { SlaveWorkerInfo.SLAVE_WORKER_INFO.CHANNEL_NAME, SlaveWorkerInfo.SLAVE_WORKER_INFO.ID }, true);
    public static final UniqueKey<TablesPrivRecord> KEY_TABLES_PRIV_PRIMARY = Internal.createUniqueKey(TablesPriv.TABLES_PRIV, DSL.name("KEY_tables_priv_PRIMARY"), new TableField[] { TablesPriv.TABLES_PRIV.HOST, TablesPriv.TABLES_PRIV.USER, TablesPriv.TABLES_PRIV.DB, TablesPriv.TABLES_PRIV.TABLE_NAME }, true);
    public static final UniqueKey<TimeZoneRecord> KEY_TIME_ZONE_PRIMARY = Internal.createUniqueKey(TimeZone.TIME_ZONE, DSL.name("KEY_time_zone_PRIMARY"), new TableField[] { TimeZone.TIME_ZONE.TIME_ZONE_ID }, true);
    public static final UniqueKey<TimeZoneLeapSecondRecord> KEY_TIME_ZONE_LEAP_SECOND_PRIMARY = Internal.createUniqueKey(TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND, DSL.name("KEY_time_zone_leap_second_PRIMARY"), new TableField[] { TimeZoneLeapSecond.TIME_ZONE_LEAP_SECOND.TRANSITION_TIME }, true);
    public static final UniqueKey<TimeZoneNameRecord> KEY_TIME_ZONE_NAME_PRIMARY = Internal.createUniqueKey(TimeZoneName.TIME_ZONE_NAME, DSL.name("KEY_time_zone_name_PRIMARY"), new TableField[] { TimeZoneName.TIME_ZONE_NAME.NAME }, true);
    public static final UniqueKey<TimeZoneTransitionRecord> KEY_TIME_ZONE_TRANSITION_PRIMARY = Internal.createUniqueKey(TimeZoneTransition.TIME_ZONE_TRANSITION, DSL.name("KEY_time_zone_transition_PRIMARY"), new TableField[] { TimeZoneTransition.TIME_ZONE_TRANSITION.TIME_ZONE_ID, TimeZoneTransition.TIME_ZONE_TRANSITION.TRANSITION_TIME }, true);
    public static final UniqueKey<TimeZoneTransitionTypeRecord> KEY_TIME_ZONE_TRANSITION_TYPE_PRIMARY = Internal.createUniqueKey(TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE, DSL.name("KEY_time_zone_transition_type_PRIMARY"), new TableField[] { TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TIME_ZONE_ID, TimeZoneTransitionType.TIME_ZONE_TRANSITION_TYPE.TRANSITION_TYPE_ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.HOST, User.USER.USER_ }, true);
}
