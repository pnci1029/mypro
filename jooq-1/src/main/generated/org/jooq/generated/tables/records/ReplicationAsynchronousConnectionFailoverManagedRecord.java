/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.JSON;
import org.jooq.Record2;
import org.jooq.generated.tables.JReplicationAsynchronousConnectionFailoverManaged;
import org.jooq.generated.tables.pojos.ReplicationAsynchronousConnectionFailoverManaged;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The managed source configuration details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailoverManagedRecord extends UpdatableRecordImpl<ReplicationAsynchronousConnectionFailoverManagedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord setChannelName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public String getChannelName() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>.
     * The name of the source which needs to be managed.
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord setManagedName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>.
     * The name of the source which needs to be managed.
     */
    public String getManagedName() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>.
     * Determines the managed type.
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord setManagedType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>.
     * Determines the managed type.
     */
    public String getManagedType() {
        return (String) get(2);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Configuration</code>.
     * The data to help manage group. For Managed_type = GroupReplication,
     * Configuration value should contain {"Primary_weight": 80,
     * "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the
     * group, and weight=60 for rest of the members in
     * mysql.replication_asynchronous_connection_failover table.
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord setConfiguration(JSON value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Configuration</code>.
     * The data to help manage group. For Managed_type = GroupReplication,
     * Configuration value should contain {"Primary_weight": 80,
     * "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the
     * group, and weight=60 for rest of the members in
     * mysql.replication_asynchronous_connection_failover table.
     */
    public JSON getConfiguration() {
        return (JSON) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReplicationAsynchronousConnectionFailoverManagedRecord
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord() {
        super(JReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);
    }

    /**
     * Create a detached, initialised
     * ReplicationAsynchronousConnectionFailoverManagedRecord
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord(String channelName, String managedName, String managedType, JSON configuration) {
        super(JReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);

        setChannelName(channelName);
        setManagedName(managedName);
        setManagedType(managedType);
        setConfiguration(configuration);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised
     * ReplicationAsynchronousConnectionFailoverManagedRecord
     */
    public ReplicationAsynchronousConnectionFailoverManagedRecord(ReplicationAsynchronousConnectionFailoverManaged value) {
        super(JReplicationAsynchronousConnectionFailoverManaged.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER_MANAGED);

        if (value != null) {
            setChannelName(value.getChannelName());
            setManagedName(value.getManagedName());
            setManagedType(value.getManagedType());
            setConfiguration(value.getConfiguration());
            resetChangedOnNotNull();
        }
    }
}
