/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.DefaultRolesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Default roles
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JDefaultRoles extends TableImpl<DefaultRolesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.default_roles</code>
     */
    public static final JDefaultRoles DEFAULT_ROLES = new JDefaultRoles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefaultRolesRecord> getRecordType() {
        return DefaultRolesRecord.class;
    }

    /**
     * The column <code>mysql.default_roles.HOST</code>.
     */
    public final TableField<DefaultRolesRecord, String> HOST = createField(DSL.name("HOST"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.default_roles.USER</code>.
     */
    public final TableField<DefaultRolesRecord, String> USER = createField(DSL.name("USER"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.default_roles.DEFAULT_ROLE_HOST</code>.
     */
    public final TableField<DefaultRolesRecord, String> DEFAULT_ROLE_HOST = createField(DSL.name("DEFAULT_ROLE_HOST"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("%", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.default_roles.DEFAULT_ROLE_USER</code>.
     */
    public final TableField<DefaultRolesRecord, String> DEFAULT_ROLE_USER = createField(DSL.name("DEFAULT_ROLE_USER"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    private JDefaultRoles(Name alias, Table<DefaultRolesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JDefaultRoles(Name alias, Table<DefaultRolesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Default roles"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.default_roles</code> table reference
     */
    public JDefaultRoles(String alias) {
        this(DSL.name(alias), DEFAULT_ROLES);
    }

    /**
     * Create an aliased <code>mysql.default_roles</code> table reference
     */
    public JDefaultRoles(Name alias) {
        this(alias, DEFAULT_ROLES);
    }

    /**
     * Create a <code>mysql.default_roles</code> table reference
     */
    public JDefaultRoles() {
        this(DSL.name("default_roles"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<DefaultRolesRecord> getPrimaryKey() {
        return Keys.KEY_DEFAULT_ROLES_PRIMARY;
    }

    @Override
    public JDefaultRoles as(String alias) {
        return new JDefaultRoles(DSL.name(alias), this);
    }

    @Override
    public JDefaultRoles as(Name alias) {
        return new JDefaultRoles(alias, this);
    }

    @Override
    public JDefaultRoles as(Table<?> alias) {
        return new JDefaultRoles(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefaultRoles rename(String name) {
        return new JDefaultRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefaultRoles rename(Name name) {
        return new JDefaultRoles(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDefaultRoles rename(Table<?> name) {
        return new JDefaultRoles(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDefaultRoles where(Condition condition) {
        return new JDefaultRoles(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDefaultRoles where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDefaultRoles where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDefaultRoles where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDefaultRoles where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDefaultRoles where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDefaultRoles where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDefaultRoles where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDefaultRoles whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDefaultRoles whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
