/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record4;
import org.jooq.generated.tables.ProxiesPriv;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * User proxy privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProxiesPrivRecord extends UpdatableRecordImpl<ProxiesPrivRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.proxies_priv.Host</code>.
     */
    public ProxiesPrivRecord setHost(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.Host</code>.
     */
    public String getHost() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mysql.proxies_priv.User</code>.
     */
    public ProxiesPrivRecord setUser(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.User</code>.
     */
    public String getUser() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.proxies_priv.Proxied_host</code>.
     */
    public ProxiesPrivRecord setProxiedHost(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.Proxied_host</code>.
     */
    public String getProxiedHost() {
        return (String) get(2);
    }

    /**
     * Setter for <code>mysql.proxies_priv.Proxied_user</code>.
     */
    public ProxiesPrivRecord setProxiedUser(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.Proxied_user</code>.
     */
    public String getProxiedUser() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.proxies_priv.With_grant</code>.
     */
    public ProxiesPrivRecord setWithGrant(Byte value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.With_grant</code>.
     */
    public Byte getWithGrant() {
        return (Byte) get(4);
    }

    /**
     * Setter for <code>mysql.proxies_priv.Grantor</code>.
     */
    public ProxiesPrivRecord setGrantor(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.Grantor</code>.
     */
    public String getGrantor() {
        return (String) get(5);
    }

    /**
     * Setter for <code>mysql.proxies_priv.Timestamp</code>.
     */
    public ProxiesPrivRecord setTimestamp(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.proxies_priv.Timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record4<String, String, String, String> key() {
        return (Record4) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ProxiesPrivRecord
     */
    public ProxiesPrivRecord() {
        super(ProxiesPriv.PROXIES_PRIV);
    }

    /**
     * Create a detached, initialised ProxiesPrivRecord
     */
    public ProxiesPrivRecord(String host, String user, String proxiedHost, String proxiedUser, Byte withGrant, String grantor, LocalDateTime timestamp) {
        super(ProxiesPriv.PROXIES_PRIV);

        setHost(host);
        setUser(user);
        setProxiedHost(proxiedHost);
        setProxiedUser(proxiedUser);
        setWithGrant(withGrant);
        setGrantor(grantor);
        setTimestamp(timestamp);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ProxiesPrivRecord
     */
    public ProxiesPrivRecord(org.jooq.generated.tables.pojos.ProxiesPriv value) {
        super(ProxiesPriv.PROXIES_PRIV);

        if (value != null) {
            setHost(value.getHost());
            setUser(value.getUser());
            setProxiedHost(value.getProxiedHost());
            setProxiedUser(value.getProxiedUser());
            setWithGrant(value.getWithGrant());
            setGrantor(value.getGrantor());
            setTimestamp(value.getTimestamp());
            resetChangedOnNotNull();
        }
    }
}
