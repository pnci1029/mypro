/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record1;
import org.jooq.generated.tables.SlaveMasterInfo;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Master Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveMasterInfoRecord extends UpdatableRecordImpl<SlaveMasterInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.slave_master_info.Number_of_lines</code>. Number
     * of lines in the file.
     */
    public SlaveMasterInfoRecord setNumberOfLines(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Number_of_lines</code>. Number
     * of lines in the file.
     */
    public UInteger getNumberOfLines() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Master_log_name</code>. The name
     * of the master binary log currently being read from the master.
     */
    public SlaveMasterInfoRecord setMasterLogName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Master_log_name</code>. The name
     * of the master binary log currently being read from the master.
     */
    public String getMasterLogName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Master_log_pos</code>. The
     * master log position of the last read event.
     */
    public SlaveMasterInfoRecord setMasterLogPos(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Master_log_pos</code>. The
     * master log position of the last read event.
     */
    public ULong getMasterLogPos() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Host</code>. The host name of
     * the source.
     */
    public SlaveMasterInfoRecord setHost(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Host</code>. The host name of
     * the source.
     */
    public String getHost() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.slave_master_info.User_name</code>. The user name
     * used to connect to the master.
     */
    public SlaveMasterInfoRecord setUserName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.User_name</code>. The user name
     * used to connect to the master.
     */
    public String getUserName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>mysql.slave_master_info.User_password</code>. The
     * password used to connect to the master.
     */
    public SlaveMasterInfoRecord setUserPassword(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.User_password</code>. The
     * password used to connect to the master.
     */
    public String getUserPassword() {
        return (String) get(5);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Port</code>. The network port
     * used to connect to the master.
     */
    public SlaveMasterInfoRecord setPort(UInteger value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Port</code>. The network port
     * used to connect to the master.
     */
    public UInteger getPort() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Connect_retry</code>. The period
     * (in seconds) that the slave will wait before trying to reconnect to the
     * master.
     */
    public SlaveMasterInfoRecord setConnectRetry(UInteger value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Connect_retry</code>. The period
     * (in seconds) that the slave will wait before trying to reconnect to the
     * master.
     */
    public UInteger getConnectRetry() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Enabled_ssl</code>. Indicates
     * whether the server supports SSL connections.
     */
    public SlaveMasterInfoRecord setEnabledSsl(Byte value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Enabled_ssl</code>. Indicates
     * whether the server supports SSL connections.
     */
    public Byte getEnabledSsl() {
        return (Byte) get(8);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_ca</code>. The file used for
     * the Certificate Authority (CA) certificate.
     */
    public SlaveMasterInfoRecord setSslCa(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_ca</code>. The file used for
     * the Certificate Authority (CA) certificate.
     */
    public String getSslCa() {
        return (String) get(9);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_capath</code>. The path to
     * the Certificate Authority (CA) certificates.
     */
    public SlaveMasterInfoRecord setSslCapath(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_capath</code>. The path to
     * the Certificate Authority (CA) certificates.
     */
    public String getSslCapath() {
        return (String) get(10);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_cert</code>. The name of the
     * SSL certificate file.
     */
    public SlaveMasterInfoRecord setSslCert(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_cert</code>. The name of the
     * SSL certificate file.
     */
    public String getSslCert() {
        return (String) get(11);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_cipher</code>. The name of
     * the cipher in use for the SSL connection.
     */
    public SlaveMasterInfoRecord setSslCipher(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_cipher</code>. The name of
     * the cipher in use for the SSL connection.
     */
    public String getSslCipher() {
        return (String) get(12);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_key</code>. The name of the
     * SSL key file.
     */
    public SlaveMasterInfoRecord setSslKey(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_key</code>. The name of the
     * SSL key file.
     */
    public String getSslKey() {
        return (String) get(13);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_verify_server_cert</code>.
     * Whether to verify the server certificate.
     */
    public SlaveMasterInfoRecord setSslVerifyServerCert(Byte value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_verify_server_cert</code>.
     * Whether to verify the server certificate.
     */
    public Byte getSslVerifyServerCert() {
        return (Byte) get(14);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Heartbeat</code>.
     */
    public SlaveMasterInfoRecord setHeartbeat(Double value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Heartbeat</code>.
     */
    public Double getHeartbeat() {
        return (Double) get(15);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Bind</code>. Displays which
     * interface is employed when connecting to the MySQL server
     */
    public SlaveMasterInfoRecord setBind(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Bind</code>. Displays which
     * interface is employed when connecting to the MySQL server
     */
    public String getBind() {
        return (String) get(16);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ignored_server_ids</code>. The
     * number of server IDs to be ignored, followed by the actual server IDs
     */
    public SlaveMasterInfoRecord setIgnoredServerIds(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ignored_server_ids</code>. The
     * number of server IDs to be ignored, followed by the actual server IDs
     */
    public String getIgnoredServerIds() {
        return (String) get(17);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Uuid</code>. The master server
     * uuid.
     */
    public SlaveMasterInfoRecord setUuid(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Uuid</code>. The master server
     * uuid.
     */
    public String getUuid() {
        return (String) get(18);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Retry_count</code>. Number of
     * reconnect attempts, to the master, before giving up.
     */
    public SlaveMasterInfoRecord setRetryCount(ULong value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Retry_count</code>. Number of
     * reconnect attempts, to the master, before giving up.
     */
    public ULong getRetryCount() {
        return (ULong) get(19);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_crl</code>. The file used
     * for the Certificate Revocation List (CRL)
     */
    public SlaveMasterInfoRecord setSslCrl(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_crl</code>. The file used
     * for the Certificate Revocation List (CRL)
     */
    public String getSslCrl() {
        return (String) get(20);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Ssl_crlpath</code>. The path
     * used for Certificate Revocation List (CRL) files
     */
    public SlaveMasterInfoRecord setSslCrlpath(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Ssl_crlpath</code>. The path
     * used for Certificate Revocation List (CRL) files
     */
    public String getSslCrlpath() {
        return (String) get(21);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Enabled_auto_position</code>.
     * Indicates whether GTIDs will be used to retrieve events from the master.
     */
    public SlaveMasterInfoRecord setEnabledAutoPosition(Byte value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Enabled_auto_position</code>.
     * Indicates whether GTIDs will be used to retrieve events from the master.
     */
    public Byte getEnabledAutoPosition() {
        return (Byte) get(22);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public SlaveMasterInfoRecord setChannelName(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Channel_name</code>. The channel
     * on which the replica is connected to a source. Used in Multisource
     * Replication
     */
    public String getChannelName() {
        return (String) get(23);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Tls_version</code>. Tls version
     */
    public SlaveMasterInfoRecord setTlsVersion(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Tls_version</code>. Tls version
     */
    public String getTlsVersion() {
        return (String) get(24);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Public_key_path</code>. The file
     * containing public key of master server.
     */
    public SlaveMasterInfoRecord setPublicKeyPath(String value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Public_key_path</code>. The file
     * containing public key of master server.
     */
    public String getPublicKeyPath() {
        return (String) get(25);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Get_public_key</code>.
     * Preference to get public key from master.
     */
    public SlaveMasterInfoRecord setGetPublicKey(Byte value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Get_public_key</code>.
     * Preference to get public key from master.
     */
    public Byte getGetPublicKey() {
        return (Byte) get(26);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Network_namespace</code>.
     * Network namespace used for communication with the master server.
     */
    public SlaveMasterInfoRecord setNetworkNamespace(String value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Network_namespace</code>.
     * Network namespace used for communication with the master server.
     */
    public String getNetworkNamespace() {
        return (String) get(27);
    }

    /**
     * Setter for
     * <code>mysql.slave_master_info.Master_compression_algorithm</code>.
     * Compression algorithm supported for data transfer between source and
     * replica.
     */
    public SlaveMasterInfoRecord setMasterCompressionAlgorithm(String value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_master_info.Master_compression_algorithm</code>.
     * Compression algorithm supported for data transfer between source and
     * replica.
     */
    public String getMasterCompressionAlgorithm() {
        return (String) get(28);
    }

    /**
     * Setter for
     * <code>mysql.slave_master_info.Master_zstd_compression_level</code>.
     * Compression level associated with zstd compression algorithm.
     */
    public SlaveMasterInfoRecord setMasterZstdCompressionLevel(UInteger value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_master_info.Master_zstd_compression_level</code>.
     * Compression level associated with zstd compression algorithm.
     */
    public UInteger getMasterZstdCompressionLevel() {
        return (UInteger) get(29);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Tls_ciphersuites</code>.
     * Ciphersuites used for TLS 1.3 communication with the master server.
     */
    public SlaveMasterInfoRecord setTlsCiphersuites(String value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Tls_ciphersuites</code>.
     * Ciphersuites used for TLS 1.3 communication with the master server.
     */
    public String getTlsCiphersuites() {
        return (String) get(30);
    }

    /**
     * Setter for
     * <code>mysql.slave_master_info.Source_connection_auto_failover</code>.
     * Indicates whether the channel connection failover is enabled.
     */
    public SlaveMasterInfoRecord setSourceConnectionAutoFailover(Byte value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_master_info.Source_connection_auto_failover</code>.
     * Indicates whether the channel connection failover is enabled.
     */
    public Byte getSourceConnectionAutoFailover() {
        return (Byte) get(31);
    }

    /**
     * Setter for <code>mysql.slave_master_info.Gtid_only</code>. Indicates if
     * this channel only uses GTIDs and does not persist positions.
     */
    public SlaveMasterInfoRecord setGtidOnly(Byte value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_master_info.Gtid_only</code>. Indicates if
     * this channel only uses GTIDs and does not persist positions.
     */
    public Byte getGtidOnly() {
        return (Byte) get(32);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SlaveMasterInfoRecord
     */
    public SlaveMasterInfoRecord() {
        super(SlaveMasterInfo.SLAVE_MASTER_INFO);
    }

    /**
     * Create a detached, initialised SlaveMasterInfoRecord
     */
    public SlaveMasterInfoRecord(UInteger numberOfLines, String masterLogName, ULong masterLogPos, String host, String userName, String userPassword, UInteger port, UInteger connectRetry, Byte enabledSsl, String sslCa, String sslCapath, String sslCert, String sslCipher, String sslKey, Byte sslVerifyServerCert, Double heartbeat, String bind, String ignoredServerIds, String uuid, ULong retryCount, String sslCrl, String sslCrlpath, Byte enabledAutoPosition, String channelName, String tlsVersion, String publicKeyPath, Byte getPublicKey, String networkNamespace, String masterCompressionAlgorithm, UInteger masterZstdCompressionLevel, String tlsCiphersuites, Byte sourceConnectionAutoFailover, Byte gtidOnly) {
        super(SlaveMasterInfo.SLAVE_MASTER_INFO);

        setNumberOfLines(numberOfLines);
        setMasterLogName(masterLogName);
        setMasterLogPos(masterLogPos);
        setHost(host);
        setUserName(userName);
        setUserPassword(userPassword);
        setPort(port);
        setConnectRetry(connectRetry);
        setEnabledSsl(enabledSsl);
        setSslCa(sslCa);
        setSslCapath(sslCapath);
        setSslCert(sslCert);
        setSslCipher(sslCipher);
        setSslKey(sslKey);
        setSslVerifyServerCert(sslVerifyServerCert);
        setHeartbeat(heartbeat);
        setBind(bind);
        setIgnoredServerIds(ignoredServerIds);
        setUuid(uuid);
        setRetryCount(retryCount);
        setSslCrl(sslCrl);
        setSslCrlpath(sslCrlpath);
        setEnabledAutoPosition(enabledAutoPosition);
        setChannelName(channelName);
        setTlsVersion(tlsVersion);
        setPublicKeyPath(publicKeyPath);
        setGetPublicKey(getPublicKey);
        setNetworkNamespace(networkNamespace);
        setMasterCompressionAlgorithm(masterCompressionAlgorithm);
        setMasterZstdCompressionLevel(masterZstdCompressionLevel);
        setTlsCiphersuites(tlsCiphersuites);
        setSourceConnectionAutoFailover(sourceConnectionAutoFailover);
        setGtidOnly(gtidOnly);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SlaveMasterInfoRecord
     */
    public SlaveMasterInfoRecord(org.jooq.generated.tables.pojos.SlaveMasterInfo value) {
        super(SlaveMasterInfo.SLAVE_MASTER_INFO);

        if (value != null) {
            setNumberOfLines(value.getNumberOfLines());
            setMasterLogName(value.getMasterLogName());
            setMasterLogPos(value.getMasterLogPos());
            setHost(value.getHost());
            setUserName(value.getUserName());
            setUserPassword(value.getUserPassword());
            setPort(value.getPort());
            setConnectRetry(value.getConnectRetry());
            setEnabledSsl(value.getEnabledSsl());
            setSslCa(value.getSslCa());
            setSslCapath(value.getSslCapath());
            setSslCert(value.getSslCert());
            setSslCipher(value.getSslCipher());
            setSslKey(value.getSslKey());
            setSslVerifyServerCert(value.getSslVerifyServerCert());
            setHeartbeat(value.getHeartbeat());
            setBind(value.getBind());
            setIgnoredServerIds(value.getIgnoredServerIds());
            setUuid(value.getUuid());
            setRetryCount(value.getRetryCount());
            setSslCrl(value.getSslCrl());
            setSslCrlpath(value.getSslCrlpath());
            setEnabledAutoPosition(value.getEnabledAutoPosition());
            setChannelName(value.getChannelName());
            setTlsVersion(value.getTlsVersion());
            setPublicKeyPath(value.getPublicKeyPath());
            setGetPublicKey(value.getGetPublicKey());
            setNetworkNamespace(value.getNetworkNamespace());
            setMasterCompressionAlgorithm(value.getMasterCompressionAlgorithm());
            setMasterZstdCompressionLevel(value.getMasterZstdCompressionLevel());
            setTlsCiphersuites(value.getTlsCiphersuites());
            setSourceConnectionAutoFailover(value.getSourceConnectionAutoFailover());
            setGtidOnly(value.getGtidOnly());
            resetChangedOnNotNull();
        }
    }
}
