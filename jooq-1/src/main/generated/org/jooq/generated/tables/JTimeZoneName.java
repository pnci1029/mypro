/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.TimeZoneNameRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * Time zone names
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTimeZoneName extends TableImpl<TimeZoneNameRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.time_zone_name</code>
     */
    public static final JTimeZoneName TIME_ZONE_NAME = new JTimeZoneName();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimeZoneNameRecord> getRecordType() {
        return TimeZoneNameRecord.class;
    }

    /**
     * The column <code>mysql.time_zone_name.Name</code>.
     */
    public final TableField<TimeZoneNameRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.time_zone_name.Time_zone_id</code>.
     */
    public final TableField<TimeZoneNameRecord, UInteger> TIME_ZONE_ID = createField(DSL.name("Time_zone_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private JTimeZoneName(Name alias, Table<TimeZoneNameRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JTimeZoneName(Name alias, Table<TimeZoneNameRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Time zone names"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.time_zone_name</code> table reference
     */
    public JTimeZoneName(String alias) {
        this(DSL.name(alias), TIME_ZONE_NAME);
    }

    /**
     * Create an aliased <code>mysql.time_zone_name</code> table reference
     */
    public JTimeZoneName(Name alias) {
        this(alias, TIME_ZONE_NAME);
    }

    /**
     * Create a <code>mysql.time_zone_name</code> table reference
     */
    public JTimeZoneName() {
        this(DSL.name("time_zone_name"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<TimeZoneNameRecord> getPrimaryKey() {
        return Keys.KEY_TIME_ZONE_NAME_PRIMARY;
    }

    @Override
    public JTimeZoneName as(String alias) {
        return new JTimeZoneName(DSL.name(alias), this);
    }

    @Override
    public JTimeZoneName as(Name alias) {
        return new JTimeZoneName(alias, this);
    }

    @Override
    public JTimeZoneName as(Table<?> alias) {
        return new JTimeZoneName(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTimeZoneName rename(String name) {
        return new JTimeZoneName(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTimeZoneName rename(Name name) {
        return new JTimeZoneName(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTimeZoneName rename(Table<?> name) {
        return new JTimeZoneName(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeZoneName where(Condition condition) {
        return new JTimeZoneName(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeZoneName where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeZoneName where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeZoneName where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeZoneName where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeZoneName where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeZoneName where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JTimeZoneName where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeZoneName whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JTimeZoneName whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
