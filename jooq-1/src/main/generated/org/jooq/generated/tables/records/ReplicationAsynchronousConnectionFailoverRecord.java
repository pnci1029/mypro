/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record5;
import org.jooq.generated.tables.JReplicationAsynchronousConnectionFailover;
import org.jooq.generated.tables.pojos.ReplicationAsynchronousConnectionFailover;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * The source configuration details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailoverRecord extends UpdatableRecordImpl<ReplicationAsynchronousConnectionFailoverRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public ReplicationAsynchronousConnectionFailoverRecord setChannelName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public String getChannelName() {
        return (String) get(0);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Host</code>. The
     * source hostname that the replica will attempt to switch over the
     * replication connection to in case of a failure.
     */
    public ReplicationAsynchronousConnectionFailoverRecord setHost(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Host</code>. The
     * source hostname that the replica will attempt to switch over the
     * replication connection to in case of a failure.
     */
    public String getHost() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Port</code>. The
     * source port that the replica will attempt to switch over the replication
     * connection to in case of a failure.
     */
    public ReplicationAsynchronousConnectionFailoverRecord setPort(UInteger value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Port</code>. The
     * source port that the replica will attempt to switch over the replication
     * connection to in case of a failure.
     */
    public UInteger getPort() {
        return (UInteger) get(2);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Network_namespace</code>.
     * The source network namespace that the replica will attempt to switch over
     * the replication connection to in case of a failure. If its value is
     * empty, connections use the default (global) namespace.
     */
    public ReplicationAsynchronousConnectionFailoverRecord setNetworkNamespace(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Network_namespace</code>.
     * The source network namespace that the replica will attempt to switch over
     * the replication connection to in case of a failure. If its value is
     * empty, connections use the default (global) namespace.
     */
    public String getNetworkNamespace() {
        return (String) get(3);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Weight</code>.
     * The order in which the replica shall try to switch the connection over to
     * when there are failures. Weight can be set to a number between 1 and 100,
     * where 100 is the highest weight and 1 the lowest.
     */
    public ReplicationAsynchronousConnectionFailoverRecord setWeight(UByte value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Weight</code>.
     * The order in which the replica shall try to switch the connection over to
     * when there are failures. Weight can be set to a number between 1 and 100,
     * where 100 is the highest weight and 1 the lowest.
     */
    public UByte getWeight() {
        return (UByte) get(4);
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Managed_name</code>.
     * The name of the group which this server belongs to.
     */
    public ReplicationAsynchronousConnectionFailoverRecord setManagedName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Managed_name</code>.
     * The name of the group which this server belongs to.
     */
    public String getManagedName() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record5<String, String, UInteger, String, String> key() {
        return (Record5) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReplicationAsynchronousConnectionFailoverRecord
     */
    public ReplicationAsynchronousConnectionFailoverRecord() {
        super(JReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);
    }

    /**
     * Create a detached, initialised
     * ReplicationAsynchronousConnectionFailoverRecord
     */
    public ReplicationAsynchronousConnectionFailoverRecord(String channelName, String host, UInteger port, String networkNamespace, UByte weight, String managedName) {
        super(JReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);

        setChannelName(channelName);
        setHost(host);
        setPort(port);
        setNetworkNamespace(networkNamespace);
        setWeight(weight);
        setManagedName(managedName);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised
     * ReplicationAsynchronousConnectionFailoverRecord
     */
    public ReplicationAsynchronousConnectionFailoverRecord(ReplicationAsynchronousConnectionFailover value) {
        super(JReplicationAsynchronousConnectionFailover.REPLICATION_ASYNCHRONOUS_CONNECTION_FAILOVER);

        if (value != null) {
            setChannelName(value.getChannelName());
            setHost(value.getHost());
            setPort(value.getPort());
            setNetworkNamespace(value.getNetworkNamespace());
            setWeight(value.getWeight());
            setManagedName(value.getManagedName());
            resetChangedOnNotNull();
        }
    }
}
