/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record3;
import org.jooq.generated.tables.JNdbBinlogIndex;
import org.jooq.generated.tables.pojos.NdbBinlogIndex;
import org.jooq.generated.tables.records.NdbBinlogIndexRecord;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NdbBinlogIndexDao extends DAOImpl<NdbBinlogIndexRecord, NdbBinlogIndex, Record3<ULong, UInteger, ULong>> {

    /**
     * Create a new NdbBinlogIndexDao without any configuration
     */
    public NdbBinlogIndexDao() {
        super(JNdbBinlogIndex.NDB_BINLOG_INDEX, NdbBinlogIndex.class);
    }

    /**
     * Create a new NdbBinlogIndexDao with an attached configuration
     */
    public NdbBinlogIndexDao(Configuration configuration) {
        super(JNdbBinlogIndex.NDB_BINLOG_INDEX, NdbBinlogIndex.class, configuration);
    }

    @Override
    public Record3<ULong, UInteger, ULong> getId(NdbBinlogIndex object) {
        return compositeKeyRecord(object.getEpoch(), object.getOrigServerId(), object.getOrigEpoch());
    }

    /**
     * Fetch records that have <code>Position BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJPosition(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.POSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Position IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJPosition(ULong... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.POSITION, values);
    }

    /**
     * Fetch records that have <code>File BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJFile(String lowerInclusive, String upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.FILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>File IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJFile(String... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.FILE, values);
    }

    /**
     * Fetch records that have <code>epoch BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJEpoch(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.EPOCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>epoch IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJEpoch(ULong... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.EPOCH, values);
    }

    /**
     * Fetch records that have <code>inserts BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJInserts(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.INSERTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>inserts IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJInserts(UInteger... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.INSERTS, values);
    }

    /**
     * Fetch records that have <code>updates BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJUpdates(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.UPDATES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updates IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJUpdates(UInteger... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.UPDATES, values);
    }

    /**
     * Fetch records that have <code>deletes BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJDeletes(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.DELETES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deletes IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJDeletes(UInteger... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.DELETES, values);
    }

    /**
     * Fetch records that have <code>schemaops BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJSchemaops(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.SCHEMAOPS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>schemaops IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJSchemaops(UInteger... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.SCHEMAOPS, values);
    }

    /**
     * Fetch records that have <code>orig_server_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJOrigServerId(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_SERVER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>orig_server_id IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJOrigServerId(UInteger... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_SERVER_ID, values);
    }

    /**
     * Fetch records that have <code>orig_epoch BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJOrigEpoch(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_EPOCH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>orig_epoch IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJOrigEpoch(ULong... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.ORIG_EPOCH, values);
    }

    /**
     * Fetch records that have <code>gci BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJGci(UInteger lowerInclusive, UInteger upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.GCI, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gci IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJGci(UInteger... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.GCI, values);
    }

    /**
     * Fetch records that have <code>next_position BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJNextPosition(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.NEXT_POSITION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_position IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJNextPosition(ULong... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.NEXT_POSITION, values);
    }

    /**
     * Fetch records that have <code>next_file BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<NdbBinlogIndex> fetchRangeOfJNextFile(String lowerInclusive, String upperInclusive) {
        return fetchRange(JNdbBinlogIndex.NDB_BINLOG_INDEX.NEXT_FILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_file IN (values)</code>
     */
    public List<NdbBinlogIndex> fetchByJNextFile(String... values) {
        return fetch(JNdbBinlogIndex.NDB_BINLOG_INDEX.NEXT_FILE, values);
    }
}
