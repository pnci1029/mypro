/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.HelpTopicRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * help topics
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JHelpTopic extends TableImpl<HelpTopicRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.help_topic</code>
     */
    public static final JHelpTopic HELP_TOPIC = new JHelpTopic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HelpTopicRecord> getRecordType() {
        return HelpTopicRecord.class;
    }

    /**
     * The column <code>mysql.help_topic.help_topic_id</code>.
     */
    public final TableField<HelpTopicRecord, UInteger> HELP_TOPIC_ID = createField(DSL.name("help_topic_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.name</code>.
     */
    public final TableField<HelpTopicRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.help_category_id</code>.
     */
    public final TableField<HelpTopicRecord, UShort> HELP_CATEGORY_ID = createField(DSL.name("help_category_id"), SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.description</code>.
     */
    public final TableField<HelpTopicRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.example</code>.
     */
    public final TableField<HelpTopicRecord, String> EXAMPLE = createField(DSL.name("example"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mysql.help_topic.url</code>.
     */
    public final TableField<HelpTopicRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    private JHelpTopic(Name alias, Table<HelpTopicRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JHelpTopic(Name alias, Table<HelpTopicRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("help topics"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.help_topic</code> table reference
     */
    public JHelpTopic(String alias) {
        this(DSL.name(alias), HELP_TOPIC);
    }

    /**
     * Create an aliased <code>mysql.help_topic</code> table reference
     */
    public JHelpTopic(Name alias) {
        this(alias, HELP_TOPIC);
    }

    /**
     * Create a <code>mysql.help_topic</code> table reference
     */
    public JHelpTopic() {
        this(DSL.name("help_topic"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<HelpTopicRecord> getPrimaryKey() {
        return Keys.KEY_HELP_TOPIC_PRIMARY;
    }

    @Override
    public List<UniqueKey<HelpTopicRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HELP_TOPIC_NAME);
    }

    @Override
    public JHelpTopic as(String alias) {
        return new JHelpTopic(DSL.name(alias), this);
    }

    @Override
    public JHelpTopic as(Name alias) {
        return new JHelpTopic(alias, this);
    }

    @Override
    public JHelpTopic as(Table<?> alias) {
        return new JHelpTopic(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JHelpTopic rename(String name) {
        return new JHelpTopic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JHelpTopic rename(Name name) {
        return new JHelpTopic(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JHelpTopic rename(Table<?> name) {
        return new JHelpTopic(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpTopic where(Condition condition) {
        return new JHelpTopic(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpTopic where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpTopic where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpTopic where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpTopic where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpTopic where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpTopic where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpTopic where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpTopic whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpTopic whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
