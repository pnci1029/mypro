/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record1;
import org.jooq.generated.enums.TimeZoneUseLeapSeconds;
import org.jooq.generated.tables.JTimeZone;
import org.jooq.generated.tables.pojos.TimeZone;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * Time zones
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimeZoneRecord extends UpdatableRecordImpl<TimeZoneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.time_zone.Time_zone_id</code>.
     */
    public TimeZoneRecord setTimeZoneId(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.time_zone.Time_zone_id</code>.
     */
    public UInteger getTimeZoneId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>mysql.time_zone.Use_leap_seconds</code>.
     */
    public TimeZoneRecord setUseLeapSeconds(TimeZoneUseLeapSeconds value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.time_zone.Use_leap_seconds</code>.
     */
    public TimeZoneUseLeapSeconds getUseLeapSeconds() {
        return (TimeZoneUseLeapSeconds) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TimeZoneRecord
     */
    public TimeZoneRecord() {
        super(JTimeZone.TIME_ZONE);
    }

    /**
     * Create a detached, initialised TimeZoneRecord
     */
    public TimeZoneRecord(UInteger timeZoneId, TimeZoneUseLeapSeconds useLeapSeconds) {
        super(JTimeZone.TIME_ZONE);

        setTimeZoneId(timeZoneId);
        setUseLeapSeconds(useLeapSeconds);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TimeZoneRecord
     */
    public TimeZoneRecord(TimeZone value) {
        super(JTimeZone.TIME_ZONE);

        if (value != null) {
            setTimeZoneId(value.getTimeZoneId());
            setUseLeapSeconds(value.getUseLeapSeconds());
            resetChangedOnNotNull();
        }
    }
}
