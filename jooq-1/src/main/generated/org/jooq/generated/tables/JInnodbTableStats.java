/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.InnodbTableStatsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JInnodbTableStats extends TableImpl<InnodbTableStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.innodb_table_stats</code>
     */
    public static final JInnodbTableStats INNODB_TABLE_STATS = new JInnodbTableStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbTableStatsRecord> getRecordType() {
        return InnodbTableStatsRecord.class;
    }

    /**
     * The column <code>mysql.innodb_table_stats.database_name</code>.
     */
    public final TableField<InnodbTableStatsRecord, String> DATABASE_NAME = createField(DSL.name("database_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_table_stats.table_name</code>.
     */
    public final TableField<InnodbTableStatsRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(199).nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_table_stats.last_update</code>.
     */
    public final TableField<InnodbTableStatsRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.innodb_table_stats.n_rows</code>.
     */
    public final TableField<InnodbTableStatsRecord, ULong> N_ROWS = createField(DSL.name("n_rows"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_table_stats.clustered_index_size</code>.
     */
    public final TableField<InnodbTableStatsRecord, ULong> CLUSTERED_INDEX_SIZE = createField(DSL.name("clustered_index_size"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column
     * <code>mysql.innodb_table_stats.sum_of_other_index_sizes</code>.
     */
    public final TableField<InnodbTableStatsRecord, ULong> SUM_OF_OTHER_INDEX_SIZES = createField(DSL.name("sum_of_other_index_sizes"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private JInnodbTableStats(Name alias, Table<InnodbTableStatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JInnodbTableStats(Name alias, Table<InnodbTableStatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.innodb_table_stats</code> table reference
     */
    public JInnodbTableStats(String alias) {
        this(DSL.name(alias), INNODB_TABLE_STATS);
    }

    /**
     * Create an aliased <code>mysql.innodb_table_stats</code> table reference
     */
    public JInnodbTableStats(Name alias) {
        this(alias, INNODB_TABLE_STATS);
    }

    /**
     * Create a <code>mysql.innodb_table_stats</code> table reference
     */
    public JInnodbTableStats() {
        this(DSL.name("innodb_table_stats"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<InnodbTableStatsRecord> getPrimaryKey() {
        return Keys.KEY_INNODB_TABLE_STATS_PRIMARY;
    }

    @Override
    public JInnodbTableStats as(String alias) {
        return new JInnodbTableStats(DSL.name(alias), this);
    }

    @Override
    public JInnodbTableStats as(Name alias) {
        return new JInnodbTableStats(alias, this);
    }

    @Override
    public JInnodbTableStats as(Table<?> alias) {
        return new JInnodbTableStats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JInnodbTableStats rename(String name) {
        return new JInnodbTableStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JInnodbTableStats rename(Name name) {
        return new JInnodbTableStats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JInnodbTableStats rename(Table<?> name) {
        return new JInnodbTableStats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JInnodbTableStats where(Condition condition) {
        return new JInnodbTableStats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JInnodbTableStats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JInnodbTableStats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JInnodbTableStats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JInnodbTableStats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JInnodbTableStats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JInnodbTableStats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JInnodbTableStats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JInnodbTableStats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JInnodbTableStats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
