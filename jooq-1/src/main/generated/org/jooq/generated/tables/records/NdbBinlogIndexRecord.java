/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record3;
import org.jooq.generated.tables.NdbBinlogIndex;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NdbBinlogIndexRecord extends UpdatableRecordImpl<NdbBinlogIndexRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.ndb_binlog_index.Position</code>.
     */
    public NdbBinlogIndexRecord setPosition(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.Position</code>.
     */
    public ULong getPosition() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.File</code>.
     */
    public NdbBinlogIndexRecord setFile(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.File</code>.
     */
    public String getFile() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.epoch</code>.
     */
    public NdbBinlogIndexRecord setEpoch(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.epoch</code>.
     */
    public ULong getEpoch() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.inserts</code>.
     */
    public NdbBinlogIndexRecord setInserts(UInteger value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.inserts</code>.
     */
    public UInteger getInserts() {
        return (UInteger) get(3);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.updates</code>.
     */
    public NdbBinlogIndexRecord setUpdates(UInteger value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.updates</code>.
     */
    public UInteger getUpdates() {
        return (UInteger) get(4);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.deletes</code>.
     */
    public NdbBinlogIndexRecord setDeletes(UInteger value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.deletes</code>.
     */
    public UInteger getDeletes() {
        return (UInteger) get(5);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    public NdbBinlogIndexRecord setSchemaops(UInteger value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.schemaops</code>.
     */
    public UInteger getSchemaops() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    public NdbBinlogIndexRecord setOrigServerId(UInteger value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.orig_server_id</code>.
     */
    public UInteger getOrigServerId() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    public NdbBinlogIndexRecord setOrigEpoch(ULong value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.orig_epoch</code>.
     */
    public ULong getOrigEpoch() {
        return (ULong) get(8);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.gci</code>.
     */
    public NdbBinlogIndexRecord setGci(UInteger value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.gci</code>.
     */
    public UInteger getGci() {
        return (UInteger) get(9);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.next_position</code>.
     */
    public NdbBinlogIndexRecord setNextPosition(ULong value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.next_position</code>.
     */
    public ULong getNextPosition() {
        return (ULong) get(10);
    }

    /**
     * Setter for <code>mysql.ndb_binlog_index.next_file</code>.
     */
    public NdbBinlogIndexRecord setNextFile(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>mysql.ndb_binlog_index.next_file</code>.
     */
    public String getNextFile() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<ULong, UInteger, ULong> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NdbBinlogIndexRecord
     */
    public NdbBinlogIndexRecord() {
        super(NdbBinlogIndex.NDB_BINLOG_INDEX);
    }

    /**
     * Create a detached, initialised NdbBinlogIndexRecord
     */
    public NdbBinlogIndexRecord(ULong position, String file, ULong epoch, UInteger inserts, UInteger updates, UInteger deletes, UInteger schemaops, UInteger origServerId, ULong origEpoch, UInteger gci, ULong nextPosition, String nextFile) {
        super(NdbBinlogIndex.NDB_BINLOG_INDEX);

        setPosition(position);
        setFile(file);
        setEpoch(epoch);
        setInserts(inserts);
        setUpdates(updates);
        setDeletes(deletes);
        setSchemaops(schemaops);
        setOrigServerId(origServerId);
        setOrigEpoch(origEpoch);
        setGci(gci);
        setNextPosition(nextPosition);
        setNextFile(nextFile);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised NdbBinlogIndexRecord
     */
    public NdbBinlogIndexRecord(org.jooq.generated.tables.pojos.NdbBinlogIndex value) {
        super(NdbBinlogIndex.NDB_BINLOG_INDEX);

        if (value != null) {
            setPosition(value.getPosition());
            setFile(value.getFile());
            setEpoch(value.getEpoch());
            setInserts(value.getInserts());
            setUpdates(value.getUpdates());
            setDeletes(value.getDeletes());
            setSchemaops(value.getSchemaops());
            setOrigServerId(value.getOrigServerId());
            setOrigEpoch(value.getOrigEpoch());
            setGci(value.getGci());
            setNextPosition(value.getNextPosition());
            setNextFile(value.getNextFile());
            resetChangedOnNotNull();
        }
    }
}
