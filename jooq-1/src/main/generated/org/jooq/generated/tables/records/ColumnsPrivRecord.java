/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record5;
import org.jooq.generated.tables.JColumnsPriv;
import org.jooq.generated.tables.pojos.ColumnsPriv;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Column privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColumnsPrivRecord extends UpdatableRecordImpl<ColumnsPrivRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.columns_priv.Host</code>.
     */
    public ColumnsPrivRecord setHost(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.Host</code>.
     */
    public String getHost() {
        return (String) get(0);
    }

    /**
     * Setter for <code>mysql.columns_priv.Db</code>.
     */
    public ColumnsPrivRecord setDb(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.Db</code>.
     */
    public String getDb() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.columns_priv.User</code>.
     */
    public ColumnsPrivRecord setUser(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.User</code>.
     */
    public String getUser() {
        return (String) get(2);
    }

    /**
     * Setter for <code>mysql.columns_priv.Table_name</code>.
     */
    public ColumnsPrivRecord setTableName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.Table_name</code>.
     */
    public String getTableName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.columns_priv.Column_name</code>.
     */
    public ColumnsPrivRecord setColumnName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.Column_name</code>.
     */
    public String getColumnName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>mysql.columns_priv.Timestamp</code>.
     */
    public ColumnsPrivRecord setTimestamp(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.Timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>mysql.columns_priv.Column_priv</code>.
     */
    public ColumnsPrivRecord setColumnPriv(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.columns_priv.Column_priv</code>.
     */
    public String getColumnPriv() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record5<String, String, String, String, String> key() {
        return (Record5) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ColumnsPrivRecord
     */
    public ColumnsPrivRecord() {
        super(JColumnsPriv.COLUMNS_PRIV);
    }

    /**
     * Create a detached, initialised ColumnsPrivRecord
     */
    public ColumnsPrivRecord(String host, String db, String user, String tableName, String columnName, LocalDateTime timestamp, String columnPriv) {
        super(JColumnsPriv.COLUMNS_PRIV);

        setHost(host);
        setDb(db);
        setUser(user);
        setTableName(tableName);
        setColumnName(columnName);
        setTimestamp(timestamp);
        setColumnPriv(columnPriv);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ColumnsPrivRecord
     */
    public ColumnsPrivRecord(ColumnsPriv value) {
        super(JColumnsPriv.COLUMNS_PRIV);

        if (value != null) {
            setHost(value.getHost());
            setDb(value.getDb());
            setUser(value.getUser());
            setTableName(value.getTableName());
            setColumnName(value.getColumnName());
            setTimestamp(value.getTimestamp());
            setColumnPriv(value.getColumnPriv());
            resetChangedOnNotNull();
        }
    }
}
