/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.InnodbIndexStatsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbIndexStats extends TableImpl<InnodbIndexStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.innodb_index_stats</code>
     */
    public static final InnodbIndexStats INNODB_INDEX_STATS = new InnodbIndexStats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InnodbIndexStatsRecord> getRecordType() {
        return InnodbIndexStatsRecord.class;
    }

    /**
     * The column <code>mysql.innodb_index_stats.database_name</code>.
     */
    public final TableField<InnodbIndexStatsRecord, String> DATABASE_NAME = createField(DSL.name("database_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_index_stats.table_name</code>.
     */
    public final TableField<InnodbIndexStatsRecord, String> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR(199).nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_index_stats.index_name</code>.
     */
    public final TableField<InnodbIndexStatsRecord, String> INDEX_NAME = createField(DSL.name("index_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_index_stats.last_update</code>.
     */
    public final TableField<InnodbIndexStatsRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mysql.innodb_index_stats.stat_name</code>.
     */
    public final TableField<InnodbIndexStatsRecord, String> STAT_NAME = createField(DSL.name("stat_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_index_stats.stat_value</code>.
     */
    public final TableField<InnodbIndexStatsRecord, ULong> STAT_VALUE = createField(DSL.name("stat_value"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.innodb_index_stats.sample_size</code>.
     */
    public final TableField<InnodbIndexStatsRecord, ULong> SAMPLE_SIZE = createField(DSL.name("sample_size"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>mysql.innodb_index_stats.stat_description</code>.
     */
    public final TableField<InnodbIndexStatsRecord, String> STAT_DESCRIPTION = createField(DSL.name("stat_description"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    private InnodbIndexStats(Name alias, Table<InnodbIndexStatsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InnodbIndexStats(Name alias, Table<InnodbIndexStatsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.innodb_index_stats</code> table reference
     */
    public InnodbIndexStats(String alias) {
        this(DSL.name(alias), INNODB_INDEX_STATS);
    }

    /**
     * Create an aliased <code>mysql.innodb_index_stats</code> table reference
     */
    public InnodbIndexStats(Name alias) {
        this(alias, INNODB_INDEX_STATS);
    }

    /**
     * Create a <code>mysql.innodb_index_stats</code> table reference
     */
    public InnodbIndexStats() {
        this(DSL.name("innodb_index_stats"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<InnodbIndexStatsRecord> getPrimaryKey() {
        return Keys.KEY_INNODB_INDEX_STATS_PRIMARY;
    }

    @Override
    public InnodbIndexStats as(String alias) {
        return new InnodbIndexStats(DSL.name(alias), this);
    }

    @Override
    public InnodbIndexStats as(Name alias) {
        return new InnodbIndexStats(alias, this);
    }

    @Override
    public InnodbIndexStats as(Table<?> alias) {
        return new InnodbIndexStats(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbIndexStats rename(String name) {
        return new InnodbIndexStats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbIndexStats rename(Name name) {
        return new InnodbIndexStats(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InnodbIndexStats rename(Table<?> name) {
        return new InnodbIndexStats(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InnodbIndexStats where(Condition condition) {
        return new InnodbIndexStats(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InnodbIndexStats where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InnodbIndexStats where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InnodbIndexStats where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InnodbIndexStats where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InnodbIndexStats where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InnodbIndexStats where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InnodbIndexStats where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InnodbIndexStats whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InnodbIndexStats whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
