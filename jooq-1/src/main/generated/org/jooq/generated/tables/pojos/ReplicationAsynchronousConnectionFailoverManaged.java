/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;

import org.jooq.JSON;


/**
 * The managed source configuration details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailoverManaged implements Serializable {

    private static final long serialVersionUID = 1L;

    private String channelName;
    private String managedName;
    private String managedType;
    private JSON configuration;

    public ReplicationAsynchronousConnectionFailoverManaged() {}

    public ReplicationAsynchronousConnectionFailoverManaged(ReplicationAsynchronousConnectionFailoverManaged value) {
        this.channelName = value.channelName;
        this.managedName = value.managedName;
        this.managedType = value.managedType;
        this.configuration = value.configuration;
    }

    public ReplicationAsynchronousConnectionFailoverManaged(
        String channelName,
        String managedName,
        String managedType,
        JSON configuration
    ) {
        this.channelName = channelName;
        this.managedName = managedName;
        this.managedType = managedType;
        this.configuration = configuration;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public String getChannelName() {
        return this.channelName;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public ReplicationAsynchronousConnectionFailoverManaged setChannelName(String channelName) {
        this.channelName = channelName;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>.
     * The name of the source which needs to be managed.
     */
    public String getManagedName() {
        return this.managedName;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_name</code>.
     * The name of the source which needs to be managed.
     */
    public ReplicationAsynchronousConnectionFailoverManaged setManagedName(String managedName) {
        this.managedName = managedName;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>.
     * Determines the managed type.
     */
    public String getManagedType() {
        return this.managedType;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Managed_type</code>.
     * Determines the managed type.
     */
    public ReplicationAsynchronousConnectionFailoverManaged setManagedType(String managedType) {
        this.managedType = managedType;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Configuration</code>.
     * The data to help manage group. For Managed_type = GroupReplication,
     * Configuration value should contain {"Primary_weight": 80,
     * "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the
     * group, and weight=60 for rest of the members in
     * mysql.replication_asynchronous_connection_failover table.
     */
    public JSON getConfiguration() {
        return this.configuration;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover_managed.Configuration</code>.
     * The data to help manage group. For Managed_type = GroupReplication,
     * Configuration value should contain {"Primary_weight": 80,
     * "Secondary_weight": 60}, so that it assigns weight=80 to PRIMARY of the
     * group, and weight=60 for rest of the members in
     * mysql.replication_asynchronous_connection_failover table.
     */
    public ReplicationAsynchronousConnectionFailoverManaged setConfiguration(JSON configuration) {
        this.configuration = configuration;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ReplicationAsynchronousConnectionFailoverManaged other = (ReplicationAsynchronousConnectionFailoverManaged) obj;
        if (this.channelName == null) {
            if (other.channelName != null)
                return false;
        }
        else if (!this.channelName.equals(other.channelName))
            return false;
        if (this.managedName == null) {
            if (other.managedName != null)
                return false;
        }
        else if (!this.managedName.equals(other.managedName))
            return false;
        if (this.managedType == null) {
            if (other.managedType != null)
                return false;
        }
        else if (!this.managedType.equals(other.managedType))
            return false;
        if (this.configuration == null) {
            if (other.configuration != null)
                return false;
        }
        else if (!this.configuration.equals(other.configuration))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.channelName == null) ? 0 : this.channelName.hashCode());
        result = prime * result + ((this.managedName == null) ? 0 : this.managedName.hashCode());
        result = prime * result + ((this.managedType == null) ? 0 : this.managedType.hashCode());
        result = prime * result + ((this.configuration == null) ? 0 : this.configuration.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReplicationAsynchronousConnectionFailoverManaged (");

        sb.append(channelName);
        sb.append(", ").append(managedName);
        sb.append(", ").append(managedType);
        sb.append(", ").append(configuration);

        sb.append(")");
        return sb.toString();
    }
}
