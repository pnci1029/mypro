/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;
import java.time.LocalTime;

import org.jooq.generated.tables.SlowLog;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Slow log
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlowLogRecord extends TableRecordImpl<SlowLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.slow_log.start_time</code>.
     */
    public SlowLogRecord setStartTime(LocalDateTime value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.start_time</code>.
     */
    public LocalDateTime getStartTime() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>mysql.slow_log.user_host</code>.
     */
    public SlowLogRecord setUserHost(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.user_host</code>.
     */
    public String getUserHost() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.slow_log.query_time</code>.
     */
    public SlowLogRecord setQueryTime(LocalTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.query_time</code>.
     */
    public LocalTime getQueryTime() {
        return (LocalTime) get(2);
    }

    /**
     * Setter for <code>mysql.slow_log.lock_time</code>.
     */
    public SlowLogRecord setLockTime(LocalTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.lock_time</code>.
     */
    public LocalTime getLockTime() {
        return (LocalTime) get(3);
    }

    /**
     * Setter for <code>mysql.slow_log.rows_sent</code>.
     */
    public SlowLogRecord setRowsSent(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.rows_sent</code>.
     */
    public Integer getRowsSent() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>mysql.slow_log.rows_examined</code>.
     */
    public SlowLogRecord setRowsExamined(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.rows_examined</code>.
     */
    public Integer getRowsExamined() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>mysql.slow_log.db</code>.
     */
    public SlowLogRecord setDb(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.db</code>.
     */
    public String getDb() {
        return (String) get(6);
    }

    /**
     * Setter for <code>mysql.slow_log.last_insert_id</code>.
     */
    public SlowLogRecord setLastInsertId(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.last_insert_id</code>.
     */
    public Integer getLastInsertId() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>mysql.slow_log.insert_id</code>.
     */
    public SlowLogRecord setInsertId(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.insert_id</code>.
     */
    public Integer getInsertId() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>mysql.slow_log.server_id</code>.
     */
    public SlowLogRecord setServerId(UInteger value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.server_id</code>.
     */
    public UInteger getServerId() {
        return (UInteger) get(9);
    }

    /**
     * Setter for <code>mysql.slow_log.sql_text</code>.
     */
    public SlowLogRecord setSqlText(byte[] value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.sql_text</code>.
     */
    public byte[] getSqlText() {
        return (byte[]) get(10);
    }

    /**
     * Setter for <code>mysql.slow_log.thread_id</code>.
     */
    public SlowLogRecord setThreadId(ULong value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slow_log.thread_id</code>.
     */
    public ULong getThreadId() {
        return (ULong) get(11);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SlowLogRecord
     */
    public SlowLogRecord() {
        super(SlowLog.SLOW_LOG);
    }

    /**
     * Create a detached, initialised SlowLogRecord
     */
    public SlowLogRecord(LocalDateTime startTime, String userHost, LocalTime queryTime, LocalTime lockTime, Integer rowsSent, Integer rowsExamined, String db, Integer lastInsertId, Integer insertId, UInteger serverId, byte[] sqlText, ULong threadId) {
        super(SlowLog.SLOW_LOG);

        setStartTime(startTime);
        setUserHost(userHost);
        setQueryTime(queryTime);
        setLockTime(lockTime);
        setRowsSent(rowsSent);
        setRowsExamined(rowsExamined);
        setDb(db);
        setLastInsertId(lastInsertId);
        setInsertId(insertId);
        setServerId(serverId);
        setSqlText(sqlText);
        setThreadId(threadId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SlowLogRecord
     */
    public SlowLogRecord(org.jooq.generated.tables.pojos.SlowLog value) {
        super(SlowLog.SLOW_LOG);

        if (value != null) {
            setStartTime(value.getStartTime());
            setUserHost(value.getUserHost());
            setQueryTime(value.getQueryTime());
            setLockTime(value.getLockTime());
            setRowsSent(value.getRowsSent());
            setRowsExamined(value.getRowsExamined());
            setDb(value.getDb());
            setLastInsertId(value.getLastInsertId());
            setInsertId(value.getInsertId());
            setServerId(value.getServerId());
            setSqlText(value.getSqlText());
            setThreadId(value.getThreadId());
            resetChangedOnNotNull();
        }
    }
}
