/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import org.jooq.Record1;
import org.jooq.generated.enums.SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType;
import org.jooq.generated.enums.SlaveRelayLogInfoRequireTablePrimaryKeyCheck;
import org.jooq.generated.tables.SlaveRelayLogInfo;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * Relay Log Information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlaveRelayLogInfoRecord extends UpdatableRecordImpl<SlaveRelayLogInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.slave_relay_log_info.Number_of_lines</code>.
     * Number of lines in the file or rows in the table. Used to version table
     * definitions.
     */
    public SlaveRelayLogInfoRecord setNumberOfLines(UInteger value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Number_of_lines</code>.
     * Number of lines in the file or rows in the table. Used to version table
     * definitions.
     */
    public UInteger getNumberOfLines() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Relay_log_name</code>. The
     * name of the current relay log file.
     */
    public SlaveRelayLogInfoRecord setRelayLogName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Relay_log_name</code>. The
     * name of the current relay log file.
     */
    public String getRelayLogName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The
     * relay log position of the last executed event.
     */
    public SlaveRelayLogInfoRecord setRelayLogPos(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Relay_log_pos</code>. The
     * relay log position of the last executed event.
     */
    public ULong getRelayLogPos() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Master_log_name</code>. The
     * name of the master binary log file from which the events in the relay log
     * file were read.
     */
    public SlaveRelayLogInfoRecord setMasterLogName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Master_log_name</code>. The
     * name of the master binary log file from which the events in the relay log
     * file were read.
     */
    public String getMasterLogName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Master_log_pos</code>. The
     * master log position of the last executed event.
     */
    public SlaveRelayLogInfoRecord setMasterLogPos(ULong value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Master_log_pos</code>. The
     * master log position of the last executed event.
     */
    public ULong getMasterLogPos() {
        return (ULong) get(4);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Sql_delay</code>. The number
     * of seconds that the slave must lag behind the master.
     */
    public SlaveRelayLogInfoRecord setSqlDelay(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Sql_delay</code>. The number
     * of seconds that the slave must lag behind the master.
     */
    public Integer getSqlDelay() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    public SlaveRelayLogInfoRecord setNumberOfWorkers(UInteger value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Number_of_workers</code>.
     */
    public UInteger getNumberOfWorkers() {
        return (UInteger) get(6);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Id</code>. Internal Id that
     * uniquely identifies this record.
     */
    public SlaveRelayLogInfoRecord setId(UInteger value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Id</code>. Internal Id that
     * uniquely identifies this record.
     */
    public UInteger getId() {
        return (UInteger) get(7);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Channel_name</code>. The
     * channel on which the replica is connected to a source. Used in
     * Multisource Replication
     */
    public SlaveRelayLogInfoRecord setChannelName(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Channel_name</code>. The
     * channel on which the replica is connected to a source. Used in
     * Multisource Replication
     */
    public String getChannelName() {
        return (String) get(8);
    }

    /**
     * Setter for
     * <code>mysql.slave_relay_log_info.Privilege_checks_username</code>.
     * Username part of PRIVILEGE_CHECKS_USER.
     */
    public SlaveRelayLogInfoRecord setPrivilegeChecksUsername(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_relay_log_info.Privilege_checks_username</code>.
     * Username part of PRIVILEGE_CHECKS_USER.
     */
    public String getPrivilegeChecksUsername() {
        return (String) get(9);
    }

    /**
     * Setter for
     * <code>mysql.slave_relay_log_info.Privilege_checks_hostname</code>.
     * Hostname part of PRIVILEGE_CHECKS_USER.
     */
    public SlaveRelayLogInfoRecord setPrivilegeChecksHostname(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_relay_log_info.Privilege_checks_hostname</code>.
     * Hostname part of PRIVILEGE_CHECKS_USER.
     */
    public String getPrivilegeChecksHostname() {
        return (String) get(10);
    }

    /**
     * Setter for <code>mysql.slave_relay_log_info.Require_row_format</code>.
     * Indicates whether the channel shall only accept row based events.
     */
    public SlaveRelayLogInfoRecord setRequireRowFormat(Byte value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>mysql.slave_relay_log_info.Require_row_format</code>.
     * Indicates whether the channel shall only accept row based events.
     */
    public Byte getRequireRowFormat() {
        return (Byte) get(11);
    }

    /**
     * Setter for
     * <code>mysql.slave_relay_log_info.Require_table_primary_key_check</code>.
     * Indicates what is the channel policy regarding tables without primary
     * keys on create and alter table queries
     */
    public SlaveRelayLogInfoRecord setRequireTablePrimaryKeyCheck(SlaveRelayLogInfoRequireTablePrimaryKeyCheck value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_relay_log_info.Require_table_primary_key_check</code>.
     * Indicates what is the channel policy regarding tables without primary
     * keys on create and alter table queries
     */
    public SlaveRelayLogInfoRequireTablePrimaryKeyCheck getRequireTablePrimaryKeyCheck() {
        return (SlaveRelayLogInfoRequireTablePrimaryKeyCheck) get(12);
    }

    /**
     * Setter for
     * <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_type</code>.
     * Indicates whether the channel will generate a new GTID for anonymous
     * transactions. OFF means that anonymous transactions will remain
     * anonymous. LOCAL means that anonymous transactions will be assigned a
     * newly generated GTID based on server_uuid. UUID indicates that anonymous
     * transactions will be assigned a newly generated GTID based on
     * Assign_gtids_to_anonymous_transactions_value
     */
    public SlaveRelayLogInfoRecord setAssignGtidsToAnonymousTransactionsType(SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_type</code>.
     * Indicates whether the channel will generate a new GTID for anonymous
     * transactions. OFF means that anonymous transactions will remain
     * anonymous. LOCAL means that anonymous transactions will be assigned a
     * newly generated GTID based on server_uuid. UUID indicates that anonymous
     * transactions will be assigned a newly generated GTID based on
     * Assign_gtids_to_anonymous_transactions_value
     */
    public SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType getAssignGtidsToAnonymousTransactionsType() {
        return (SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType) get(13);
    }

    /**
     * Setter for
     * <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_value</code>.
     * Indicates the UUID used while generating GTIDs for anonymous transactions
     */
    public SlaveRelayLogInfoRecord setAssignGtidsToAnonymousTransactionsValue(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for
     * <code>mysql.slave_relay_log_info.Assign_gtids_to_anonymous_transactions_value</code>.
     * Indicates the UUID used while generating GTIDs for anonymous transactions
     */
    public String getAssignGtidsToAnonymousTransactionsValue() {
        return (String) get(14);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SlaveRelayLogInfoRecord
     */
    public SlaveRelayLogInfoRecord() {
        super(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO);
    }

    /**
     * Create a detached, initialised SlaveRelayLogInfoRecord
     */
    public SlaveRelayLogInfoRecord(UInteger numberOfLines, String relayLogName, ULong relayLogPos, String masterLogName, ULong masterLogPos, Integer sqlDelay, UInteger numberOfWorkers, UInteger id, String channelName, String privilegeChecksUsername, String privilegeChecksHostname, Byte requireRowFormat, SlaveRelayLogInfoRequireTablePrimaryKeyCheck requireTablePrimaryKeyCheck, SlaveRelayLogInfoAssignGtidsToAnonymousTransactionsType assignGtidsToAnonymousTransactionsType, String assignGtidsToAnonymousTransactionsValue) {
        super(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO);

        setNumberOfLines(numberOfLines);
        setRelayLogName(relayLogName);
        setRelayLogPos(relayLogPos);
        setMasterLogName(masterLogName);
        setMasterLogPos(masterLogPos);
        setSqlDelay(sqlDelay);
        setNumberOfWorkers(numberOfWorkers);
        setId(id);
        setChannelName(channelName);
        setPrivilegeChecksUsername(privilegeChecksUsername);
        setPrivilegeChecksHostname(privilegeChecksHostname);
        setRequireRowFormat(requireRowFormat);
        setRequireTablePrimaryKeyCheck(requireTablePrimaryKeyCheck);
        setAssignGtidsToAnonymousTransactionsType(assignGtidsToAnonymousTransactionsType);
        setAssignGtidsToAnonymousTransactionsValue(assignGtidsToAnonymousTransactionsValue);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SlaveRelayLogInfoRecord
     */
    public SlaveRelayLogInfoRecord(org.jooq.generated.tables.pojos.SlaveRelayLogInfo value) {
        super(SlaveRelayLogInfo.SLAVE_RELAY_LOG_INFO);

        if (value != null) {
            setNumberOfLines(value.getNumberOfLines());
            setRelayLogName(value.getRelayLogName());
            setRelayLogPos(value.getRelayLogPos());
            setMasterLogName(value.getMasterLogName());
            setMasterLogPos(value.getMasterLogPos());
            setSqlDelay(value.getSqlDelay());
            setNumberOfWorkers(value.getNumberOfWorkers());
            setId(value.getId());
            setChannelName(value.getChannelName());
            setPrivilegeChecksUsername(value.getPrivilegeChecksUsername());
            setPrivilegeChecksHostname(value.getPrivilegeChecksHostname());
            setRequireRowFormat(value.getRequireRowFormat());
            setRequireTablePrimaryKeyCheck(value.getRequireTablePrimaryKeyCheck());
            setAssignGtidsToAnonymousTransactionsType(value.getAssignGtidsToAnonymousTransactionsType());
            setAssignGtidsToAnonymousTransactionsValue(value.getAssignGtidsToAnonymousTransactionsValue());
            resetChangedOnNotNull();
        }
    }
}
