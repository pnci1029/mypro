/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JReplicationGroupConfigurationVersion;
import org.jooq.generated.tables.pojos.ReplicationGroupConfigurationVersion;
import org.jooq.generated.tables.records.ReplicationGroupConfigurationVersionRecord;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * The group configuration version.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationGroupConfigurationVersionDao extends DAOImpl<ReplicationGroupConfigurationVersionRecord, ReplicationGroupConfigurationVersion, String> {

    /**
     * Create a new ReplicationGroupConfigurationVersionDao without any
     * configuration
     */
    public ReplicationGroupConfigurationVersionDao() {
        super(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION, ReplicationGroupConfigurationVersion.class);
    }

    /**
     * Create a new ReplicationGroupConfigurationVersionDao with an attached
     * configuration
     */
    public ReplicationGroupConfigurationVersionDao(Configuration configuration) {
        super(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION, ReplicationGroupConfigurationVersion.class, configuration);
    }

    @Override
    public String getId(ReplicationGroupConfigurationVersion object) {
        return object.getName();
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ReplicationGroupConfigurationVersion> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ReplicationGroupConfigurationVersion> fetchByJName(String... values) {
        return fetch(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public ReplicationGroupConfigurationVersion fetchOneByJName(String value) {
        return fetchOne(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<ReplicationGroupConfigurationVersion> fetchOptionalByJName(String value) {
        return fetchOptional(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.NAME, value);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ReplicationGroupConfigurationVersion> fetchRangeOfJVersion(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<ReplicationGroupConfigurationVersion> fetchByJVersion(ULong... values) {
        return fetch(JReplicationGroupConfigurationVersion.REPLICATION_GROUP_CONFIGURATION_VERSION.VERSION, values);
    }
}
