/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record4;
import org.jooq.generated.tables.JInnodbIndexStats;
import org.jooq.generated.tables.pojos.InnodbIndexStats;
import org.jooq.generated.tables.records.InnodbIndexStatsRecord;
import org.jooq.impl.DAOImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbIndexStatsDao extends DAOImpl<InnodbIndexStatsRecord, InnodbIndexStats, Record4<String, String, String, String>> {

    /**
     * Create a new InnodbIndexStatsDao without any configuration
     */
    public InnodbIndexStatsDao() {
        super(JInnodbIndexStats.INNODB_INDEX_STATS, InnodbIndexStats.class);
    }

    /**
     * Create a new InnodbIndexStatsDao with an attached configuration
     */
    public InnodbIndexStatsDao(Configuration configuration) {
        super(JInnodbIndexStats.INNODB_INDEX_STATS, InnodbIndexStats.class, configuration);
    }

    @Override
    public Record4<String, String, String, String> getId(InnodbIndexStats object) {
        return compositeKeyRecord(object.getDatabaseName(), object.getTableName(), object.getIndexName(), object.getStatName());
    }

    /**
     * Fetch records that have <code>database_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJDatabaseName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.DATABASE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>database_name IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJDatabaseName(String... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.DATABASE_NAME, values);
    }

    /**
     * Fetch records that have <code>table_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJTableName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.TABLE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>table_name IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJTableName(String... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.TABLE_NAME, values);
    }

    /**
     * Fetch records that have <code>index_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJIndexName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.INDEX_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>index_name IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJIndexName(String... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.INDEX_NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.LAST_UPDATE, values);
    }

    /**
     * Fetch records that have <code>stat_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJStatName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.STAT_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stat_name IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJStatName(String... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.STAT_NAME, values);
    }

    /**
     * Fetch records that have <code>stat_value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJStatValue(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.STAT_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stat_value IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJStatValue(ULong... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.STAT_VALUE, values);
    }

    /**
     * Fetch records that have <code>sample_size BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJSampleSize(ULong lowerInclusive, ULong upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.SAMPLE_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sample_size IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJSampleSize(ULong... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.SAMPLE_SIZE, values);
    }

    /**
     * Fetch records that have <code>stat_description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<InnodbIndexStats> fetchRangeOfJStatDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(JInnodbIndexStats.INNODB_INDEX_STATS.STAT_DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stat_description IN (values)</code>
     */
    public List<InnodbIndexStats> fetchByJStatDescription(String... values) {
        return fetch(JInnodbIndexStats.INNODB_INDEX_STATS.STAT_DESCRIPTION, values);
    }
}
