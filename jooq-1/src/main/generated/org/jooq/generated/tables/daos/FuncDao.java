/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.enums.FuncType;
import org.jooq.generated.tables.JFunc;
import org.jooq.generated.tables.pojos.Func;
import org.jooq.generated.tables.records.FuncRecord;
import org.jooq.impl.DAOImpl;


/**
 * User defined functions
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FuncDao extends DAOImpl<FuncRecord, Func, String> {

    /**
     * Create a new FuncDao without any configuration
     */
    public FuncDao() {
        super(JFunc.FUNC, Func.class);
    }

    /**
     * Create a new FuncDao with an attached configuration
     */
    public FuncDao(Configuration configuration) {
        super(JFunc.FUNC, Func.class, configuration);
    }

    @Override
    public String getId(Func object) {
        return object.getName();
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Func> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JFunc.FUNC.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<Func> fetchByJName(String... values) {
        return fetch(JFunc.FUNC.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Func fetchOneByJName(String value) {
        return fetchOne(JFunc.FUNC.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<Func> fetchOptionalByJName(String value) {
        return fetchOptional(JFunc.FUNC.NAME, value);
    }

    /**
     * Fetch records that have <code>ret BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Func> fetchRangeOfJRet(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(JFunc.FUNC.RET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ret IN (values)</code>
     */
    public List<Func> fetchByJRet(Byte... values) {
        return fetch(JFunc.FUNC.RET, values);
    }

    /**
     * Fetch records that have <code>dl BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Func> fetchRangeOfJDl(String lowerInclusive, String upperInclusive) {
        return fetchRange(JFunc.FUNC.DL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dl IN (values)</code>
     */
    public List<Func> fetchByJDl(String... values) {
        return fetch(JFunc.FUNC.DL, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Func> fetchRangeOfJType(FuncType lowerInclusive, FuncType upperInclusive) {
        return fetchRange(JFunc.FUNC.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<Func> fetchByJType(FuncType... values) {
        return fetch(JFunc.FUNC.TYPE, values);
    }
}
