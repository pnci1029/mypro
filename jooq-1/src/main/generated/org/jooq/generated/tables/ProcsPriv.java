/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.enums.ProcsPrivRoutineType;
import org.jooq.generated.tables.records.ProcsPrivRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Procedure privileges
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcsPriv extends TableImpl<ProcsPrivRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.procs_priv</code>
     */
    public static final ProcsPriv PROCS_PRIV = new ProcsPriv();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcsPrivRecord> getRecordType() {
        return ProcsPrivRecord.class;
    }

    /**
     * The column <code>mysql.procs_priv.Host</code>.
     */
    public final TableField<ProcsPrivRecord, String> HOST = createField(DSL.name("Host"), SQLDataType.CHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.procs_priv.Db</code>.
     */
    public final TableField<ProcsPrivRecord, String> DB = createField(DSL.name("Db"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.procs_priv.User</code>.
     */
    public final TableField<ProcsPrivRecord, String> USER = createField(DSL.name("User"), SQLDataType.CHAR(32).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.procs_priv.Routine_name</code>.
     */
    public final TableField<ProcsPrivRecord, String> ROUTINE_NAME = createField(DSL.name("Routine_name"), SQLDataType.CHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>mysql.procs_priv.Routine_type</code>.
     */
    public final TableField<ProcsPrivRecord, ProcsPrivRoutineType> ROUTINE_TYPE = createField(DSL.name("Routine_type"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(ProcsPrivRoutineType.class), this, "");

    /**
     * The column <code>mysql.procs_priv.Grantor</code>.
     */
    public final TableField<ProcsPrivRecord, String> GRANTOR = createField(DSL.name("Grantor"), SQLDataType.VARCHAR(288).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mysql.procs_priv.Proc_priv</code>.
     */
    public final TableField<ProcsPrivRecord, String> PROC_PRIV = createField(DSL.name("Proc_priv"), SQLDataType.VARCHAR(27).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>mysql.procs_priv.Timestamp</code>.
     */
    public final TableField<ProcsPrivRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("Timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ProcsPriv(Name alias, Table<ProcsPrivRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProcsPriv(Name alias, Table<ProcsPrivRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("Procedure privileges"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.procs_priv</code> table reference
     */
    public ProcsPriv(String alias) {
        this(DSL.name(alias), PROCS_PRIV);
    }

    /**
     * Create an aliased <code>mysql.procs_priv</code> table reference
     */
    public ProcsPriv(Name alias) {
        this(alias, PROCS_PRIV);
    }

    /**
     * Create a <code>mysql.procs_priv</code> table reference
     */
    public ProcsPriv() {
        this(DSL.name("procs_priv"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROCS_PRIV_GRANTOR);
    }

    @Override
    public UniqueKey<ProcsPrivRecord> getPrimaryKey() {
        return Keys.KEY_PROCS_PRIV_PRIMARY;
    }

    @Override
    public ProcsPriv as(String alias) {
        return new ProcsPriv(DSL.name(alias), this);
    }

    @Override
    public ProcsPriv as(Name alias) {
        return new ProcsPriv(alias, this);
    }

    @Override
    public ProcsPriv as(Table<?> alias) {
        return new ProcsPriv(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcsPriv rename(String name) {
        return new ProcsPriv(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcsPriv rename(Name name) {
        return new ProcsPriv(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcsPriv rename(Table<?> name) {
        return new ProcsPriv(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcsPriv where(Condition condition) {
        return new ProcsPriv(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcsPriv where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcsPriv where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcsPriv where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcsPriv where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcsPriv where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcsPriv where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProcsPriv where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcsPriv whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProcsPriv whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
