/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.JMysql;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.HelpCategoryRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;


/**
 * help categories
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JHelpCategory extends TableImpl<HelpCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.help_category</code>
     */
    public static final JHelpCategory HELP_CATEGORY = new JHelpCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HelpCategoryRecord> getRecordType() {
        return HelpCategoryRecord.class;
    }

    /**
     * The column <code>mysql.help_category.help_category_id</code>.
     */
    public final TableField<HelpCategoryRecord, UShort> HELP_CATEGORY_ID = createField(DSL.name("help_category_id"), SQLDataType.SMALLINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_category.name</code>.
     */
    public final TableField<HelpCategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>mysql.help_category.parent_category_id</code>.
     */
    public final TableField<HelpCategoryRecord, UShort> PARENT_CATEGORY_ID = createField(DSL.name("parent_category_id"), SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>mysql.help_category.url</code>.
     */
    public final TableField<HelpCategoryRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    private JHelpCategory(Name alias, Table<HelpCategoryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JHelpCategory(Name alias, Table<HelpCategoryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("help categories"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.help_category</code> table reference
     */
    public JHelpCategory(String alias) {
        this(DSL.name(alias), HELP_CATEGORY);
    }

    /**
     * Create an aliased <code>mysql.help_category</code> table reference
     */
    public JHelpCategory(Name alias) {
        this(alias, HELP_CATEGORY);
    }

    /**
     * Create a <code>mysql.help_category</code> table reference
     */
    public JHelpCategory() {
        this(DSL.name("help_category"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JMysql.MYSQL;
    }

    @Override
    public UniqueKey<HelpCategoryRecord> getPrimaryKey() {
        return Keys.KEY_HELP_CATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<HelpCategoryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HELP_CATEGORY_NAME);
    }

    @Override
    public JHelpCategory as(String alias) {
        return new JHelpCategory(DSL.name(alias), this);
    }

    @Override
    public JHelpCategory as(Name alias) {
        return new JHelpCategory(alias, this);
    }

    @Override
    public JHelpCategory as(Table<?> alias) {
        return new JHelpCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JHelpCategory rename(String name) {
        return new JHelpCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JHelpCategory rename(Name name) {
        return new JHelpCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JHelpCategory rename(Table<?> name) {
        return new JHelpCategory(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpCategory where(Condition condition) {
        return new JHelpCategory(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpCategory where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpCategory where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpCategory where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpCategory where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpCategory where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpCategory where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JHelpCategory where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpCategory whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JHelpCategory whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
