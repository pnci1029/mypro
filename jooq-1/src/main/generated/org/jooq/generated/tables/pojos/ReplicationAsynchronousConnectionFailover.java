/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.pojos;


import java.io.Serializable;

import org.jooq.types.UByte;
import org.jooq.types.UInteger;


/**
 * The source configuration details
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReplicationAsynchronousConnectionFailover implements Serializable {

    private static final long serialVersionUID = 1L;

    private String channelName;
    private String host;
    private UInteger port;
    private String networkNamespace;
    private UByte weight;
    private String managedName;

    public ReplicationAsynchronousConnectionFailover() {}

    public ReplicationAsynchronousConnectionFailover(ReplicationAsynchronousConnectionFailover value) {
        this.channelName = value.channelName;
        this.host = value.host;
        this.port = value.port;
        this.networkNamespace = value.networkNamespace;
        this.weight = value.weight;
        this.managedName = value.managedName;
    }

    public ReplicationAsynchronousConnectionFailover(
        String channelName,
        String host,
        UInteger port,
        String networkNamespace,
        UByte weight,
        String managedName
    ) {
        this.channelName = channelName;
        this.host = host;
        this.port = port;
        this.networkNamespace = networkNamespace;
        this.weight = weight;
        this.managedName = managedName;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public String getChannelName() {
        return this.channelName;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Channel_name</code>.
     * The replication channel name that connects source and replica.
     */
    public ReplicationAsynchronousConnectionFailover setChannelName(String channelName) {
        this.channelName = channelName;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Host</code>. The
     * source hostname that the replica will attempt to switch over the
     * replication connection to in case of a failure.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Host</code>. The
     * source hostname that the replica will attempt to switch over the
     * replication connection to in case of a failure.
     */
    public ReplicationAsynchronousConnectionFailover setHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Port</code>. The
     * source port that the replica will attempt to switch over the replication
     * connection to in case of a failure.
     */
    public UInteger getPort() {
        return this.port;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Port</code>. The
     * source port that the replica will attempt to switch over the replication
     * connection to in case of a failure.
     */
    public ReplicationAsynchronousConnectionFailover setPort(UInteger port) {
        this.port = port;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Network_namespace</code>.
     * The source network namespace that the replica will attempt to switch over
     * the replication connection to in case of a failure. If its value is
     * empty, connections use the default (global) namespace.
     */
    public String getNetworkNamespace() {
        return this.networkNamespace;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Network_namespace</code>.
     * The source network namespace that the replica will attempt to switch over
     * the replication connection to in case of a failure. If its value is
     * empty, connections use the default (global) namespace.
     */
    public ReplicationAsynchronousConnectionFailover setNetworkNamespace(String networkNamespace) {
        this.networkNamespace = networkNamespace;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Weight</code>.
     * The order in which the replica shall try to switch the connection over to
     * when there are failures. Weight can be set to a number between 1 and 100,
     * where 100 is the highest weight and 1 the lowest.
     */
    public UByte getWeight() {
        return this.weight;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Weight</code>.
     * The order in which the replica shall try to switch the connection over to
     * when there are failures. Weight can be set to a number between 1 and 100,
     * where 100 is the highest weight and 1 the lowest.
     */
    public ReplicationAsynchronousConnectionFailover setWeight(UByte weight) {
        this.weight = weight;
        return this;
    }

    /**
     * Getter for
     * <code>mysql.replication_asynchronous_connection_failover.Managed_name</code>.
     * The name of the group which this server belongs to.
     */
    public String getManagedName() {
        return this.managedName;
    }

    /**
     * Setter for
     * <code>mysql.replication_asynchronous_connection_failover.Managed_name</code>.
     * The name of the group which this server belongs to.
     */
    public ReplicationAsynchronousConnectionFailover setManagedName(String managedName) {
        this.managedName = managedName;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ReplicationAsynchronousConnectionFailover other = (ReplicationAsynchronousConnectionFailover) obj;
        if (this.channelName == null) {
            if (other.channelName != null)
                return false;
        }
        else if (!this.channelName.equals(other.channelName))
            return false;
        if (this.host == null) {
            if (other.host != null)
                return false;
        }
        else if (!this.host.equals(other.host))
            return false;
        if (this.port == null) {
            if (other.port != null)
                return false;
        }
        else if (!this.port.equals(other.port))
            return false;
        if (this.networkNamespace == null) {
            if (other.networkNamespace != null)
                return false;
        }
        else if (!this.networkNamespace.equals(other.networkNamespace))
            return false;
        if (this.weight == null) {
            if (other.weight != null)
                return false;
        }
        else if (!this.weight.equals(other.weight))
            return false;
        if (this.managedName == null) {
            if (other.managedName != null)
                return false;
        }
        else if (!this.managedName.equals(other.managedName))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.channelName == null) ? 0 : this.channelName.hashCode());
        result = prime * result + ((this.host == null) ? 0 : this.host.hashCode());
        result = prime * result + ((this.port == null) ? 0 : this.port.hashCode());
        result = prime * result + ((this.networkNamespace == null) ? 0 : this.networkNamespace.hashCode());
        result = prime * result + ((this.weight == null) ? 0 : this.weight.hashCode());
        result = prime * result + ((this.managedName == null) ? 0 : this.managedName.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ReplicationAsynchronousConnectionFailover (");

        sb.append(channelName);
        sb.append(", ").append(host);
        sb.append(", ").append(port);
        sb.append(", ").append(networkNamespace);
        sb.append(", ").append(weight);
        sb.append(", ").append(managedName);

        sb.append(")");
        return sb.toString();
    }
}
