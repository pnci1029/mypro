/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record4;
import org.jooq.generated.enums.RoleEdgesWithAdminOption;
import org.jooq.generated.tables.JRoleEdges;
import org.jooq.generated.tables.pojos.RoleEdges;
import org.jooq.generated.tables.records.RoleEdgesRecord;
import org.jooq.impl.DAOImpl;


/**
 * Role hierarchy and role grants
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleEdgesDao extends DAOImpl<RoleEdgesRecord, RoleEdges, Record4<String, String, String, String>> {

    /**
     * Create a new RoleEdgesDao without any configuration
     */
    public RoleEdgesDao() {
        super(JRoleEdges.ROLE_EDGES, RoleEdges.class);
    }

    /**
     * Create a new RoleEdgesDao with an attached configuration
     */
    public RoleEdgesDao(Configuration configuration) {
        super(JRoleEdges.ROLE_EDGES, RoleEdges.class, configuration);
    }

    @Override
    public Record4<String, String, String, String> getId(RoleEdges object) {
        return compositeKeyRecord(object.getFromHost(), object.getFromUser(), object.getToHost(), object.getToUser());
    }

    /**
     * Fetch records that have <code>FROM_HOST BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RoleEdges> fetchRangeOfJFromHost(String lowerInclusive, String upperInclusive) {
        return fetchRange(JRoleEdges.ROLE_EDGES.FROM_HOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>FROM_HOST IN (values)</code>
     */
    public List<RoleEdges> fetchByJFromHost(String... values) {
        return fetch(JRoleEdges.ROLE_EDGES.FROM_HOST, values);
    }

    /**
     * Fetch records that have <code>FROM_USER BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RoleEdges> fetchRangeOfJFromUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(JRoleEdges.ROLE_EDGES.FROM_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>FROM_USER IN (values)</code>
     */
    public List<RoleEdges> fetchByJFromUser(String... values) {
        return fetch(JRoleEdges.ROLE_EDGES.FROM_USER, values);
    }

    /**
     * Fetch records that have <code>TO_HOST BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RoleEdges> fetchRangeOfJToHost(String lowerInclusive, String upperInclusive) {
        return fetchRange(JRoleEdges.ROLE_EDGES.TO_HOST, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TO_HOST IN (values)</code>
     */
    public List<RoleEdges> fetchByJToHost(String... values) {
        return fetch(JRoleEdges.ROLE_EDGES.TO_HOST, values);
    }

    /**
     * Fetch records that have <code>TO_USER BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RoleEdges> fetchRangeOfJToUser(String lowerInclusive, String upperInclusive) {
        return fetchRange(JRoleEdges.ROLE_EDGES.TO_USER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TO_USER IN (values)</code>
     */
    public List<RoleEdges> fetchByJToUser(String... values) {
        return fetch(JRoleEdges.ROLE_EDGES.TO_USER, values);
    }

    /**
     * Fetch records that have <code>WITH_ADMIN_OPTION BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<RoleEdges> fetchRangeOfJWithAdminOption(RoleEdgesWithAdminOption lowerInclusive, RoleEdgesWithAdminOption upperInclusive) {
        return fetchRange(JRoleEdges.ROLE_EDGES.WITH_ADMIN_OPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>WITH_ADMIN_OPTION IN (values)</code>
     */
    public List<RoleEdges> fetchByJWithAdminOption(RoleEdgesWithAdminOption... values) {
        return fetch(JRoleEdges.ROLE_EDGES.WITH_ADMIN_OPTION, values);
    }
}
