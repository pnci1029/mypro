/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.GtidExecutedRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GtidExecuted extends TableImpl<GtidExecutedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.gtid_executed</code>
     */
    public static final GtidExecuted GTID_EXECUTED = new GtidExecuted();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GtidExecutedRecord> getRecordType() {
        return GtidExecutedRecord.class;
    }

    /**
     * The column <code>mysql.gtid_executed.source_uuid</code>. uuid of the
     * source where the transaction was originally executed.
     */
    public final TableField<GtidExecutedRecord, String> SOURCE_UUID = createField(DSL.name("source_uuid"), SQLDataType.CHAR(36).nullable(false), this, "uuid of the source where the transaction was originally executed.");

    /**
     * The column <code>mysql.gtid_executed.interval_start</code>. First number
     * of interval.
     */
    public final TableField<GtidExecutedRecord, Long> INTERVAL_START = createField(DSL.name("interval_start"), SQLDataType.BIGINT.nullable(false), this, "First number of interval.");

    /**
     * The column <code>mysql.gtid_executed.interval_end</code>. Last number of
     * interval.
     */
    public final TableField<GtidExecutedRecord, Long> INTERVAL_END = createField(DSL.name("interval_end"), SQLDataType.BIGINT.nullable(false), this, "Last number of interval.");

    private GtidExecuted(Name alias, Table<GtidExecutedRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GtidExecuted(Name alias, Table<GtidExecutedRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.gtid_executed</code> table reference
     */
    public GtidExecuted(String alias) {
        this(DSL.name(alias), GTID_EXECUTED);
    }

    /**
     * Create an aliased <code>mysql.gtid_executed</code> table reference
     */
    public GtidExecuted(Name alias) {
        this(alias, GTID_EXECUTED);
    }

    /**
     * Create a <code>mysql.gtid_executed</code> table reference
     */
    public GtidExecuted() {
        this(DSL.name("gtid_executed"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<GtidExecutedRecord> getPrimaryKey() {
        return Keys.KEY_GTID_EXECUTED_PRIMARY;
    }

    @Override
    public GtidExecuted as(String alias) {
        return new GtidExecuted(DSL.name(alias), this);
    }

    @Override
    public GtidExecuted as(Name alias) {
        return new GtidExecuted(alias, this);
    }

    @Override
    public GtidExecuted as(Table<?> alias) {
        return new GtidExecuted(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GtidExecuted rename(String name) {
        return new GtidExecuted(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GtidExecuted rename(Name name) {
        return new GtidExecuted(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GtidExecuted rename(Table<?> name) {
        return new GtidExecuted(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GtidExecuted where(Condition condition) {
        return new GtidExecuted(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GtidExecuted where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GtidExecuted where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GtidExecuted where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GtidExecuted where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GtidExecuted where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GtidExecuted where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GtidExecuted where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GtidExecuted whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GtidExecuted whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
