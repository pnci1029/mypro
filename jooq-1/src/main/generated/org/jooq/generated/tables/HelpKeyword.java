/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.HelpKeywordRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * help keywords
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HelpKeyword extends TableImpl<HelpKeywordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.help_keyword</code>
     */
    public static final HelpKeyword HELP_KEYWORD = new HelpKeyword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HelpKeywordRecord> getRecordType() {
        return HelpKeywordRecord.class;
    }

    /**
     * The column <code>mysql.help_keyword.help_keyword_id</code>.
     */
    public final TableField<HelpKeywordRecord, UInteger> HELP_KEYWORD_ID = createField(DSL.name("help_keyword_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_keyword.name</code>.
     */
    public final TableField<HelpKeywordRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CHAR(64).nullable(false), this, "");

    private HelpKeyword(Name alias, Table<HelpKeywordRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HelpKeyword(Name alias, Table<HelpKeywordRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("help keywords"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.help_keyword</code> table reference
     */
    public HelpKeyword(String alias) {
        this(DSL.name(alias), HELP_KEYWORD);
    }

    /**
     * Create an aliased <code>mysql.help_keyword</code> table reference
     */
    public HelpKeyword(Name alias) {
        this(alias, HELP_KEYWORD);
    }

    /**
     * Create a <code>mysql.help_keyword</code> table reference
     */
    public HelpKeyword() {
        this(DSL.name("help_keyword"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<HelpKeywordRecord> getPrimaryKey() {
        return Keys.KEY_HELP_KEYWORD_PRIMARY;
    }

    @Override
    public List<UniqueKey<HelpKeywordRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_HELP_KEYWORD_NAME);
    }

    @Override
    public HelpKeyword as(String alias) {
        return new HelpKeyword(DSL.name(alias), this);
    }

    @Override
    public HelpKeyword as(Name alias) {
        return new HelpKeyword(alias, this);
    }

    @Override
    public HelpKeyword as(Table<?> alias) {
        return new HelpKeyword(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpKeyword rename(String name) {
        return new HelpKeyword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpKeyword rename(Name name) {
        return new HelpKeyword(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpKeyword rename(Table<?> name) {
        return new HelpKeyword(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpKeyword where(Condition condition) {
        return new HelpKeyword(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpKeyword where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpKeyword where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpKeyword where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpKeyword where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpKeyword where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpKeyword where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpKeyword where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpKeyword whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpKeyword whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
