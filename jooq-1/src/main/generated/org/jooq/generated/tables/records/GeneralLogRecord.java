/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.generated.tables.JGeneralLog;
import org.jooq.generated.tables.pojos.GeneralLog;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * General log
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeneralLogRecord extends TableRecordImpl<GeneralLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>mysql.general_log.event_time</code>.
     */
    public GeneralLogRecord setEventTime(LocalDateTime value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>mysql.general_log.event_time</code>.
     */
    public LocalDateTime getEventTime() {
        return (LocalDateTime) get(0);
    }

    /**
     * Setter for <code>mysql.general_log.user_host</code>.
     */
    public GeneralLogRecord setUserHost(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>mysql.general_log.user_host</code>.
     */
    public String getUserHost() {
        return (String) get(1);
    }

    /**
     * Setter for <code>mysql.general_log.thread_id</code>.
     */
    public GeneralLogRecord setThreadId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>mysql.general_log.thread_id</code>.
     */
    public ULong getThreadId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>mysql.general_log.server_id</code>.
     */
    public GeneralLogRecord setServerId(UInteger value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>mysql.general_log.server_id</code>.
     */
    public UInteger getServerId() {
        return (UInteger) get(3);
    }

    /**
     * Setter for <code>mysql.general_log.command_type</code>.
     */
    public GeneralLogRecord setCommandType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>mysql.general_log.command_type</code>.
     */
    public String getCommandType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>mysql.general_log.argument</code>.
     */
    public GeneralLogRecord setArgument(byte[] value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>mysql.general_log.argument</code>.
     */
    public byte[] getArgument() {
        return (byte[]) get(5);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GeneralLogRecord
     */
    public GeneralLogRecord() {
        super(JGeneralLog.GENERAL_LOG);
    }

    /**
     * Create a detached, initialised GeneralLogRecord
     */
    public GeneralLogRecord(LocalDateTime eventTime, String userHost, ULong threadId, UInteger serverId, String commandType, byte[] argument) {
        super(JGeneralLog.GENERAL_LOG);

        setEventTime(eventTime);
        setUserHost(userHost);
        setThreadId(threadId);
        setServerId(serverId);
        setCommandType(commandType);
        setArgument(argument);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised GeneralLogRecord
     */
    public GeneralLogRecord(GeneralLog value) {
        super(JGeneralLog.GENERAL_LOG);

        if (value != null) {
            setEventTime(value.getEventTime());
            setUserHost(value.getUserHost());
            setThreadId(value.getThreadId());
            setServerId(value.getServerId());
            setCommandType(value.getCommandType());
            setArgument(value.getArgument());
            resetChangedOnNotNull();
        }
    }
}
