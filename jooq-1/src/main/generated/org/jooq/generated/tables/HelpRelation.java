/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Keys;
import org.jooq.generated.Mysql;
import org.jooq.generated.tables.records.HelpRelationRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * keyword-topic relation
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HelpRelation extends TableImpl<HelpRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mysql.help_relation</code>
     */
    public static final HelpRelation HELP_RELATION = new HelpRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HelpRelationRecord> getRecordType() {
        return HelpRelationRecord.class;
    }

    /**
     * The column <code>mysql.help_relation.help_topic_id</code>.
     */
    public final TableField<HelpRelationRecord, UInteger> HELP_TOPIC_ID = createField(DSL.name("help_topic_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>mysql.help_relation.help_keyword_id</code>.
     */
    public final TableField<HelpRelationRecord, UInteger> HELP_KEYWORD_ID = createField(DSL.name("help_keyword_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    private HelpRelation(Name alias, Table<HelpRelationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HelpRelation(Name alias, Table<HelpRelationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("keyword-topic relation"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mysql.help_relation</code> table reference
     */
    public HelpRelation(String alias) {
        this(DSL.name(alias), HELP_RELATION);
    }

    /**
     * Create an aliased <code>mysql.help_relation</code> table reference
     */
    public HelpRelation(Name alias) {
        this(alias, HELP_RELATION);
    }

    /**
     * Create a <code>mysql.help_relation</code> table reference
     */
    public HelpRelation() {
        this(DSL.name("help_relation"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mysql.MYSQL;
    }

    @Override
    public UniqueKey<HelpRelationRecord> getPrimaryKey() {
        return Keys.KEY_HELP_RELATION_PRIMARY;
    }

    @Override
    public HelpRelation as(String alias) {
        return new HelpRelation(DSL.name(alias), this);
    }

    @Override
    public HelpRelation as(Name alias) {
        return new HelpRelation(alias, this);
    }

    @Override
    public HelpRelation as(Table<?> alias) {
        return new HelpRelation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpRelation rename(String name) {
        return new HelpRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpRelation rename(Name name) {
        return new HelpRelation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelpRelation rename(Table<?> name) {
        return new HelpRelation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpRelation where(Condition condition) {
        return new HelpRelation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpRelation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpRelation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpRelation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpRelation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpRelation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpRelation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelpRelation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpRelation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelpRelation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
